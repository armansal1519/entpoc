// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entpoc/ent/product"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *ProductCreate) SetName(s string) *ProductCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetTableName0 sets the "table_name0" field.
func (pc *ProductCreate) SetTableName0(s string) *ProductCreate {
	pc.mutation.SetTableName0(s)
	return pc
}

// SetTableName1 sets the "table_name1" field.
func (pc *ProductCreate) SetTableName1(s string) *ProductCreate {
	pc.mutation.SetTableName1(s)
	return pc
}

// SetTableName2 sets the "table_name2" field.
func (pc *ProductCreate) SetTableName2(s string) *ProductCreate {
	pc.mutation.SetTableName2(s)
	return pc
}

// SetTableName3 sets the "table_name3" field.
func (pc *ProductCreate) SetTableName3(s string) *ProductCreate {
	pc.mutation.SetTableName3(s)
	return pc
}

// SetTableName4 sets the "table_name4" field.
func (pc *ProductCreate) SetTableName4(s string) *ProductCreate {
	pc.mutation.SetTableName4(s)
	return pc
}

// SetTableName5 sets the "table_name5" field.
func (pc *ProductCreate) SetTableName5(s string) *ProductCreate {
	pc.mutation.SetTableName5(s)
	return pc
}

// SetTableName6 sets the "table_name6" field.
func (pc *ProductCreate) SetTableName6(s string) *ProductCreate {
	pc.mutation.SetTableName6(s)
	return pc
}

// SetTableName7 sets the "table_name7" field.
func (pc *ProductCreate) SetTableName7(s string) *ProductCreate {
	pc.mutation.SetTableName7(s)
	return pc
}

// SetTableName8 sets the "table_name8" field.
func (pc *ProductCreate) SetTableName8(s string) *ProductCreate {
	pc.mutation.SetTableName8(s)
	return pc
}

// SetTableName9 sets the "table_name9" field.
func (pc *ProductCreate) SetTableName9(s string) *ProductCreate {
	pc.mutation.SetTableName9(s)
	return pc
}

// SetTableName10 sets the "table_name10" field.
func (pc *ProductCreate) SetTableName10(s string) *ProductCreate {
	pc.mutation.SetTableName10(s)
	return pc
}

// SetTableName11 sets the "table_name11" field.
func (pc *ProductCreate) SetTableName11(s string) *ProductCreate {
	pc.mutation.SetTableName11(s)
	return pc
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Product.name"`)}
	}
	if _, ok := pc.mutation.TableName0(); !ok {
		return &ValidationError{Name: "table_name0", err: errors.New(`ent: missing required field "Product.table_name0"`)}
	}
	if _, ok := pc.mutation.TableName1(); !ok {
		return &ValidationError{Name: "table_name1", err: errors.New(`ent: missing required field "Product.table_name1"`)}
	}
	if _, ok := pc.mutation.TableName2(); !ok {
		return &ValidationError{Name: "table_name2", err: errors.New(`ent: missing required field "Product.table_name2"`)}
	}
	if _, ok := pc.mutation.TableName3(); !ok {
		return &ValidationError{Name: "table_name3", err: errors.New(`ent: missing required field "Product.table_name3"`)}
	}
	if _, ok := pc.mutation.TableName4(); !ok {
		return &ValidationError{Name: "table_name4", err: errors.New(`ent: missing required field "Product.table_name4"`)}
	}
	if _, ok := pc.mutation.TableName5(); !ok {
		return &ValidationError{Name: "table_name5", err: errors.New(`ent: missing required field "Product.table_name5"`)}
	}
	if _, ok := pc.mutation.TableName6(); !ok {
		return &ValidationError{Name: "table_name6", err: errors.New(`ent: missing required field "Product.table_name6"`)}
	}
	if _, ok := pc.mutation.TableName7(); !ok {
		return &ValidationError{Name: "table_name7", err: errors.New(`ent: missing required field "Product.table_name7"`)}
	}
	if _, ok := pc.mutation.TableName8(); !ok {
		return &ValidationError{Name: "table_name8", err: errors.New(`ent: missing required field "Product.table_name8"`)}
	}
	if _, ok := pc.mutation.TableName9(); !ok {
		return &ValidationError{Name: "table_name9", err: errors.New(`ent: missing required field "Product.table_name9"`)}
	}
	if _, ok := pc.mutation.TableName10(); !ok {
		return &ValidationError{Name: "table_name10", err: errors.New(`ent: missing required field "Product.table_name10"`)}
	}
	if _, ok := pc.mutation.TableName11(); !ok {
		return &ValidationError{Name: "table_name11", err: errors.New(`ent: missing required field "Product.table_name11"`)}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(product.Table, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.TableName0(); ok {
		_spec.SetField(product.FieldTableName0, field.TypeString, value)
		_node.TableName0 = value
	}
	if value, ok := pc.mutation.TableName1(); ok {
		_spec.SetField(product.FieldTableName1, field.TypeString, value)
		_node.TableName1 = value
	}
	if value, ok := pc.mutation.TableName2(); ok {
		_spec.SetField(product.FieldTableName2, field.TypeString, value)
		_node.TableName2 = value
	}
	if value, ok := pc.mutation.TableName3(); ok {
		_spec.SetField(product.FieldTableName3, field.TypeString, value)
		_node.TableName3 = value
	}
	if value, ok := pc.mutation.TableName4(); ok {
		_spec.SetField(product.FieldTableName4, field.TypeString, value)
		_node.TableName4 = value
	}
	if value, ok := pc.mutation.TableName5(); ok {
		_spec.SetField(product.FieldTableName5, field.TypeString, value)
		_node.TableName5 = value
	}
	if value, ok := pc.mutation.TableName6(); ok {
		_spec.SetField(product.FieldTableName6, field.TypeString, value)
		_node.TableName6 = value
	}
	if value, ok := pc.mutation.TableName7(); ok {
		_spec.SetField(product.FieldTableName7, field.TypeString, value)
		_node.TableName7 = value
	}
	if value, ok := pc.mutation.TableName8(); ok {
		_spec.SetField(product.FieldTableName8, field.TypeString, value)
		_node.TableName8 = value
	}
	if value, ok := pc.mutation.TableName9(); ok {
		_spec.SetField(product.FieldTableName9, field.TypeString, value)
		_node.TableName9 = value
	}
	if value, ok := pc.mutation.TableName10(); ok {
		_spec.SetField(product.FieldTableName10, field.TypeString, value)
		_node.TableName10 = value
	}
	if value, ok := pc.mutation.TableName11(); ok {
		_spec.SetField(product.FieldTableName11, field.TypeString, value)
		_node.TableName11 = value
	}
	return _node, _spec
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	builders []*ProductCreate
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entpoc/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// TableName0 holds the value of the "table_name0" field.
	TableName0 string `json:"table_name0,omitempty"`
	// TableName1 holds the value of the "table_name1" field.
	TableName1 string `json:"table_name1,omitempty"`
	// TableName2 holds the value of the "table_name2" field.
	TableName2 int `json:"table_name2,omitempty"`
	// TableName3 holds the value of the "table_name3" field.
	TableName3 string `json:"table_name3,omitempty"`
	// TableName4 holds the value of the "table_name4" field.
	TableName4 string `json:"table_name4,omitempty"`
	// TableName5 holds the value of the "table_name5" field.
	TableName5 string `json:"table_name5,omitempty"`
	// TableName6 holds the value of the "table_name6" field.
	TableName6 string `json:"table_name6,omitempty"`
	// TableName7 holds the value of the "table_name7" field.
	TableName7 string `json:"table_name7,omitempty"`
	// TableName8 holds the value of the "table_name8" field.
	TableName8 string `json:"table_name8,omitempty"`
	// TableName9 holds the value of the "table_name9" field.
	TableName9 string `json:"table_name9,omitempty"`
	// TableName10 holds the value of the "table_name10" field.
	TableName10 string `json:"table_name10,omitempty"`
	// TableName11 holds the value of the "table_name11" field.
	TableName11 string `json:"table_name11,omitempty"`
	// TableName12 holds the value of the "table_name12" field.
	TableName12 string `json:"table_name12,omitempty"`
	// TableName13 holds the value of the "table_name13" field.
	TableName13 string `json:"table_name13,omitempty"`
	// TableName14 holds the value of the "table_name14" field.
	TableName14 string `json:"table_name14,omitempty"`
	// TableName15 holds the value of the "table_name15" field.
	TableName15 string `json:"table_name15,omitempty"`
	// TableName16 holds the value of the "table_name16" field.
	TableName16 string `json:"table_name16,omitempty"`
	// TableName17 holds the value of the "table_name17" field.
	TableName17 string `json:"table_name17,omitempty"`
	// TableName18 holds the value of the "table_name18" field.
	TableName18 string `json:"table_name18,omitempty"`
	// TableName19 holds the value of the "table_name19" field.
	TableName19 string `json:"table_name19,omitempty"`
	// TableName20 holds the value of the "table_name20" field.
	TableName20 string `json:"table_name20,omitempty"`
	// TableName21 holds the value of the "table_name21" field.
	TableName21 string `json:"table_name21,omitempty"`
	// TableName22 holds the value of the "table_name22" field.
	TableName22 string `json:"table_name22,omitempty"`
	// TableName23 holds the value of the "table_name23" field.
	TableName23 string `json:"table_name23,omitempty"`
	// TableName24 holds the value of the "table_name24" field.
	TableName24 string `json:"table_name24,omitempty"`
	// TableName25 holds the value of the "table_name25" field.
	TableName25 string `json:"table_name25,omitempty"`
	// TableName26 holds the value of the "table_name26" field.
	TableName26 string `json:"table_name26,omitempty"`
	// TableName27 holds the value of the "table_name27" field.
	TableName27 string `json:"table_name27,omitempty"`
	// TableName28 holds the value of the "table_name28" field.
	TableName28 string `json:"table_name28,omitempty"`
	// TableName29 holds the value of the "table_name29" field.
	TableName29 string `json:"table_name29,omitempty"`
	// TableName30 holds the value of the "table_name30" field.
	TableName30 string `json:"table_name30,omitempty"`
	// TableName31 holds the value of the "table_name31" field.
	TableName31 string `json:"table_name31,omitempty"`
	// TableName32 holds the value of the "table_name32" field.
	TableName32 string `json:"table_name32,omitempty"`
	// TableName33 holds the value of the "table_name33" field.
	TableName33 string `json:"table_name33,omitempty"`
	// TableName34 holds the value of the "table_name34" field.
	TableName34 string `json:"table_name34,omitempty"`
	// TableName35 holds the value of the "table_name35" field.
	TableName35 string `json:"table_name35,omitempty"`
	// TableName36 holds the value of the "table_name36" field.
	TableName36 string `json:"table_name36,omitempty"`
	// TableName37 holds the value of the "table_name37" field.
	TableName37 string `json:"table_name37,omitempty"`
	// TableName38 holds the value of the "table_name38" field.
	TableName38 string `json:"table_name38,omitempty"`
	// TableName39 holds the value of the "table_name39" field.
	TableName39 string `json:"table_name39,omitempty"`
	// TableName40 holds the value of the "table_name40" field.
	TableName40 string `json:"table_name40,omitempty"`
	// TableName41 holds the value of the "table_name41" field.
	TableName41 string `json:"table_name41,omitempty"`
	// TableName42 holds the value of the "table_name42" field.
	TableName42 string `json:"table_name42,omitempty"`
	// AlteredTableName43 holds the value of the "altered_table_name43" field.
	AlteredTableName43 string `json:"altered_table_name43,omitempty"`
	// TableName44 holds the value of the "table_name44" field.
	TableName44 string `json:"table_name44,omitempty"`
	// TableName45 holds the value of the "table_name45" field.
	TableName45 string `json:"table_name45,omitempty"`
	// TableName46 holds the value of the "table_name46" field.
	TableName46 string `json:"table_name46,omitempty"`
	// TableName47 holds the value of the "table_name47" field.
	TableName47 string `json:"table_name47,omitempty"`
	// TableName48 holds the value of the "table_name48" field.
	TableName48 string `json:"table_name48,omitempty"`
	// TableName49 holds the value of the "table_name49" field.
	TableName49 string `json:"table_name49,omitempty"`
	// AlteredTableName50 holds the value of the "altered_table_name50" field.
	AlteredTableName50 string `json:"altered_table_name50,omitempty"`
	selectValues       sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldTableName2:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldTableName0, user.FieldTableName1, user.FieldTableName3, user.FieldTableName4, user.FieldTableName5, user.FieldTableName6, user.FieldTableName7, user.FieldTableName8, user.FieldTableName9, user.FieldTableName10, user.FieldTableName11, user.FieldTableName12, user.FieldTableName13, user.FieldTableName14, user.FieldTableName15, user.FieldTableName16, user.FieldTableName17, user.FieldTableName18, user.FieldTableName19, user.FieldTableName20, user.FieldTableName21, user.FieldTableName22, user.FieldTableName23, user.FieldTableName24, user.FieldTableName25, user.FieldTableName26, user.FieldTableName27, user.FieldTableName28, user.FieldTableName29, user.FieldTableName30, user.FieldTableName31, user.FieldTableName32, user.FieldTableName33, user.FieldTableName34, user.FieldTableName35, user.FieldTableName36, user.FieldTableName37, user.FieldTableName38, user.FieldTableName39, user.FieldTableName40, user.FieldTableName41, user.FieldTableName42, user.FieldAlteredTableName43, user.FieldTableName44, user.FieldTableName45, user.FieldTableName46, user.FieldTableName47, user.FieldTableName48, user.FieldTableName49, user.FieldAlteredTableName50:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldTableName0:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name0", values[i])
			} else if value.Valid {
				u.TableName0 = value.String
			}
		case user.FieldTableName1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name1", values[i])
			} else if value.Valid {
				u.TableName1 = value.String
			}
		case user.FieldTableName2:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field table_name2", values[i])
			} else if value.Valid {
				u.TableName2 = int(value.Int64)
			}
		case user.FieldTableName3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name3", values[i])
			} else if value.Valid {
				u.TableName3 = value.String
			}
		case user.FieldTableName4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name4", values[i])
			} else if value.Valid {
				u.TableName4 = value.String
			}
		case user.FieldTableName5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name5", values[i])
			} else if value.Valid {
				u.TableName5 = value.String
			}
		case user.FieldTableName6:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name6", values[i])
			} else if value.Valid {
				u.TableName6 = value.String
			}
		case user.FieldTableName7:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name7", values[i])
			} else if value.Valid {
				u.TableName7 = value.String
			}
		case user.FieldTableName8:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name8", values[i])
			} else if value.Valid {
				u.TableName8 = value.String
			}
		case user.FieldTableName9:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name9", values[i])
			} else if value.Valid {
				u.TableName9 = value.String
			}
		case user.FieldTableName10:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name10", values[i])
			} else if value.Valid {
				u.TableName10 = value.String
			}
		case user.FieldTableName11:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name11", values[i])
			} else if value.Valid {
				u.TableName11 = value.String
			}
		case user.FieldTableName12:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name12", values[i])
			} else if value.Valid {
				u.TableName12 = value.String
			}
		case user.FieldTableName13:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name13", values[i])
			} else if value.Valid {
				u.TableName13 = value.String
			}
		case user.FieldTableName14:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name14", values[i])
			} else if value.Valid {
				u.TableName14 = value.String
			}
		case user.FieldTableName15:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name15", values[i])
			} else if value.Valid {
				u.TableName15 = value.String
			}
		case user.FieldTableName16:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name16", values[i])
			} else if value.Valid {
				u.TableName16 = value.String
			}
		case user.FieldTableName17:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name17", values[i])
			} else if value.Valid {
				u.TableName17 = value.String
			}
		case user.FieldTableName18:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name18", values[i])
			} else if value.Valid {
				u.TableName18 = value.String
			}
		case user.FieldTableName19:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name19", values[i])
			} else if value.Valid {
				u.TableName19 = value.String
			}
		case user.FieldTableName20:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name20", values[i])
			} else if value.Valid {
				u.TableName20 = value.String
			}
		case user.FieldTableName21:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name21", values[i])
			} else if value.Valid {
				u.TableName21 = value.String
			}
		case user.FieldTableName22:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name22", values[i])
			} else if value.Valid {
				u.TableName22 = value.String
			}
		case user.FieldTableName23:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name23", values[i])
			} else if value.Valid {
				u.TableName23 = value.String
			}
		case user.FieldTableName24:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name24", values[i])
			} else if value.Valid {
				u.TableName24 = value.String
			}
		case user.FieldTableName25:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name25", values[i])
			} else if value.Valid {
				u.TableName25 = value.String
			}
		case user.FieldTableName26:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name26", values[i])
			} else if value.Valid {
				u.TableName26 = value.String
			}
		case user.FieldTableName27:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name27", values[i])
			} else if value.Valid {
				u.TableName27 = value.String
			}
		case user.FieldTableName28:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name28", values[i])
			} else if value.Valid {
				u.TableName28 = value.String
			}
		case user.FieldTableName29:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name29", values[i])
			} else if value.Valid {
				u.TableName29 = value.String
			}
		case user.FieldTableName30:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name30", values[i])
			} else if value.Valid {
				u.TableName30 = value.String
			}
		case user.FieldTableName31:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name31", values[i])
			} else if value.Valid {
				u.TableName31 = value.String
			}
		case user.FieldTableName32:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name32", values[i])
			} else if value.Valid {
				u.TableName32 = value.String
			}
		case user.FieldTableName33:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name33", values[i])
			} else if value.Valid {
				u.TableName33 = value.String
			}
		case user.FieldTableName34:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name34", values[i])
			} else if value.Valid {
				u.TableName34 = value.String
			}
		case user.FieldTableName35:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name35", values[i])
			} else if value.Valid {
				u.TableName35 = value.String
			}
		case user.FieldTableName36:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name36", values[i])
			} else if value.Valid {
				u.TableName36 = value.String
			}
		case user.FieldTableName37:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name37", values[i])
			} else if value.Valid {
				u.TableName37 = value.String
			}
		case user.FieldTableName38:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name38", values[i])
			} else if value.Valid {
				u.TableName38 = value.String
			}
		case user.FieldTableName39:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name39", values[i])
			} else if value.Valid {
				u.TableName39 = value.String
			}
		case user.FieldTableName40:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name40", values[i])
			} else if value.Valid {
				u.TableName40 = value.String
			}
		case user.FieldTableName41:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name41", values[i])
			} else if value.Valid {
				u.TableName41 = value.String
			}
		case user.FieldTableName42:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name42", values[i])
			} else if value.Valid {
				u.TableName42 = value.String
			}
		case user.FieldAlteredTableName43:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field altered_table_name43", values[i])
			} else if value.Valid {
				u.AlteredTableName43 = value.String
			}
		case user.FieldTableName44:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name44", values[i])
			} else if value.Valid {
				u.TableName44 = value.String
			}
		case user.FieldTableName45:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name45", values[i])
			} else if value.Valid {
				u.TableName45 = value.String
			}
		case user.FieldTableName46:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name46", values[i])
			} else if value.Valid {
				u.TableName46 = value.String
			}
		case user.FieldTableName47:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name47", values[i])
			} else if value.Valid {
				u.TableName47 = value.String
			}
		case user.FieldTableName48:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name48", values[i])
			} else if value.Valid {
				u.TableName48 = value.String
			}
		case user.FieldTableName49:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name49", values[i])
			} else if value.Valid {
				u.TableName49 = value.String
			}
		case user.FieldAlteredTableName50:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field altered_table_name50", values[i])
			} else if value.Valid {
				u.AlteredTableName50 = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("table_name0=")
	builder.WriteString(u.TableName0)
	builder.WriteString(", ")
	builder.WriteString("table_name1=")
	builder.WriteString(u.TableName1)
	builder.WriteString(", ")
	builder.WriteString("table_name2=")
	builder.WriteString(fmt.Sprintf("%v", u.TableName2))
	builder.WriteString(", ")
	builder.WriteString("table_name3=")
	builder.WriteString(u.TableName3)
	builder.WriteString(", ")
	builder.WriteString("table_name4=")
	builder.WriteString(u.TableName4)
	builder.WriteString(", ")
	builder.WriteString("table_name5=")
	builder.WriteString(u.TableName5)
	builder.WriteString(", ")
	builder.WriteString("table_name6=")
	builder.WriteString(u.TableName6)
	builder.WriteString(", ")
	builder.WriteString("table_name7=")
	builder.WriteString(u.TableName7)
	builder.WriteString(", ")
	builder.WriteString("table_name8=")
	builder.WriteString(u.TableName8)
	builder.WriteString(", ")
	builder.WriteString("table_name9=")
	builder.WriteString(u.TableName9)
	builder.WriteString(", ")
	builder.WriteString("table_name10=")
	builder.WriteString(u.TableName10)
	builder.WriteString(", ")
	builder.WriteString("table_name11=")
	builder.WriteString(u.TableName11)
	builder.WriteString(", ")
	builder.WriteString("table_name12=")
	builder.WriteString(u.TableName12)
	builder.WriteString(", ")
	builder.WriteString("table_name13=")
	builder.WriteString(u.TableName13)
	builder.WriteString(", ")
	builder.WriteString("table_name14=")
	builder.WriteString(u.TableName14)
	builder.WriteString(", ")
	builder.WriteString("table_name15=")
	builder.WriteString(u.TableName15)
	builder.WriteString(", ")
	builder.WriteString("table_name16=")
	builder.WriteString(u.TableName16)
	builder.WriteString(", ")
	builder.WriteString("table_name17=")
	builder.WriteString(u.TableName17)
	builder.WriteString(", ")
	builder.WriteString("table_name18=")
	builder.WriteString(u.TableName18)
	builder.WriteString(", ")
	builder.WriteString("table_name19=")
	builder.WriteString(u.TableName19)
	builder.WriteString(", ")
	builder.WriteString("table_name20=")
	builder.WriteString(u.TableName20)
	builder.WriteString(", ")
	builder.WriteString("table_name21=")
	builder.WriteString(u.TableName21)
	builder.WriteString(", ")
	builder.WriteString("table_name22=")
	builder.WriteString(u.TableName22)
	builder.WriteString(", ")
	builder.WriteString("table_name23=")
	builder.WriteString(u.TableName23)
	builder.WriteString(", ")
	builder.WriteString("table_name24=")
	builder.WriteString(u.TableName24)
	builder.WriteString(", ")
	builder.WriteString("table_name25=")
	builder.WriteString(u.TableName25)
	builder.WriteString(", ")
	builder.WriteString("table_name26=")
	builder.WriteString(u.TableName26)
	builder.WriteString(", ")
	builder.WriteString("table_name27=")
	builder.WriteString(u.TableName27)
	builder.WriteString(", ")
	builder.WriteString("table_name28=")
	builder.WriteString(u.TableName28)
	builder.WriteString(", ")
	builder.WriteString("table_name29=")
	builder.WriteString(u.TableName29)
	builder.WriteString(", ")
	builder.WriteString("table_name30=")
	builder.WriteString(u.TableName30)
	builder.WriteString(", ")
	builder.WriteString("table_name31=")
	builder.WriteString(u.TableName31)
	builder.WriteString(", ")
	builder.WriteString("table_name32=")
	builder.WriteString(u.TableName32)
	builder.WriteString(", ")
	builder.WriteString("table_name33=")
	builder.WriteString(u.TableName33)
	builder.WriteString(", ")
	builder.WriteString("table_name34=")
	builder.WriteString(u.TableName34)
	builder.WriteString(", ")
	builder.WriteString("table_name35=")
	builder.WriteString(u.TableName35)
	builder.WriteString(", ")
	builder.WriteString("table_name36=")
	builder.WriteString(u.TableName36)
	builder.WriteString(", ")
	builder.WriteString("table_name37=")
	builder.WriteString(u.TableName37)
	builder.WriteString(", ")
	builder.WriteString("table_name38=")
	builder.WriteString(u.TableName38)
	builder.WriteString(", ")
	builder.WriteString("table_name39=")
	builder.WriteString(u.TableName39)
	builder.WriteString(", ")
	builder.WriteString("table_name40=")
	builder.WriteString(u.TableName40)
	builder.WriteString(", ")
	builder.WriteString("table_name41=")
	builder.WriteString(u.TableName41)
	builder.WriteString(", ")
	builder.WriteString("table_name42=")
	builder.WriteString(u.TableName42)
	builder.WriteString(", ")
	builder.WriteString("altered_table_name43=")
	builder.WriteString(u.AlteredTableName43)
	builder.WriteString(", ")
	builder.WriteString("table_name44=")
	builder.WriteString(u.TableName44)
	builder.WriteString(", ")
	builder.WriteString("table_name45=")
	builder.WriteString(u.TableName45)
	builder.WriteString(", ")
	builder.WriteString("table_name46=")
	builder.WriteString(u.TableName46)
	builder.WriteString(", ")
	builder.WriteString("table_name47=")
	builder.WriteString(u.TableName47)
	builder.WriteString(", ")
	builder.WriteString("table_name48=")
	builder.WriteString(u.TableName48)
	builder.WriteString(", ")
	builder.WriteString("table_name49=")
	builder.WriteString(u.TableName49)
	builder.WriteString(", ")
	builder.WriteString("altered_table_name50=")
	builder.WriteString(u.AlteredTableName50)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

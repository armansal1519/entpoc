// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entpoc/ent/predicate"
	"entpoc/ent/product"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetTableName0 sets the "table_name0" field.
func (pu *ProductUpdate) SetTableName0(s string) *ProductUpdate {
	pu.mutation.SetTableName0(s)
	return pu
}

// SetTableName1 sets the "table_name1" field.
func (pu *ProductUpdate) SetTableName1(s string) *ProductUpdate {
	pu.mutation.SetTableName1(s)
	return pu
}

// SetTableName2 sets the "table_name2" field.
func (pu *ProductUpdate) SetTableName2(s string) *ProductUpdate {
	pu.mutation.SetTableName2(s)
	return pu
}

// SetTableName3 sets the "table_name3" field.
func (pu *ProductUpdate) SetTableName3(s string) *ProductUpdate {
	pu.mutation.SetTableName3(s)
	return pu
}

// SetTableName4 sets the "table_name4" field.
func (pu *ProductUpdate) SetTableName4(s string) *ProductUpdate {
	pu.mutation.SetTableName4(s)
	return pu
}

// SetTableName5 sets the "table_name5" field.
func (pu *ProductUpdate) SetTableName5(s string) *ProductUpdate {
	pu.mutation.SetTableName5(s)
	return pu
}

// SetTableName6 sets the "table_name6" field.
func (pu *ProductUpdate) SetTableName6(s string) *ProductUpdate {
	pu.mutation.SetTableName6(s)
	return pu
}

// SetTableName7 sets the "table_name7" field.
func (pu *ProductUpdate) SetTableName7(s string) *ProductUpdate {
	pu.mutation.SetTableName7(s)
	return pu
}

// SetTableName8 sets the "table_name8" field.
func (pu *ProductUpdate) SetTableName8(s string) *ProductUpdate {
	pu.mutation.SetTableName8(s)
	return pu
}

// SetTableName9 sets the "table_name9" field.
func (pu *ProductUpdate) SetTableName9(s string) *ProductUpdate {
	pu.mutation.SetTableName9(s)
	return pu
}

// SetTableName10 sets the "table_name10" field.
func (pu *ProductUpdate) SetTableName10(s string) *ProductUpdate {
	pu.mutation.SetTableName10(s)
	return pu
}

// SetTableName11 sets the "table_name11" field.
func (pu *ProductUpdate) SetTableName11(s string) *ProductUpdate {
	pu.mutation.SetTableName11(s)
	return pu
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.TableName0(); ok {
		_spec.SetField(product.FieldTableName0, field.TypeString, value)
	}
	if value, ok := pu.mutation.TableName1(); ok {
		_spec.SetField(product.FieldTableName1, field.TypeString, value)
	}
	if value, ok := pu.mutation.TableName2(); ok {
		_spec.SetField(product.FieldTableName2, field.TypeString, value)
	}
	if value, ok := pu.mutation.TableName3(); ok {
		_spec.SetField(product.FieldTableName3, field.TypeString, value)
	}
	if value, ok := pu.mutation.TableName4(); ok {
		_spec.SetField(product.FieldTableName4, field.TypeString, value)
	}
	if value, ok := pu.mutation.TableName5(); ok {
		_spec.SetField(product.FieldTableName5, field.TypeString, value)
	}
	if value, ok := pu.mutation.TableName6(); ok {
		_spec.SetField(product.FieldTableName6, field.TypeString, value)
	}
	if value, ok := pu.mutation.TableName7(); ok {
		_spec.SetField(product.FieldTableName7, field.TypeString, value)
	}
	if value, ok := pu.mutation.TableName8(); ok {
		_spec.SetField(product.FieldTableName8, field.TypeString, value)
	}
	if value, ok := pu.mutation.TableName9(); ok {
		_spec.SetField(product.FieldTableName9, field.TypeString, value)
	}
	if value, ok := pu.mutation.TableName10(); ok {
		_spec.SetField(product.FieldTableName10, field.TypeString, value)
	}
	if value, ok := pu.mutation.TableName11(); ok {
		_spec.SetField(product.FieldTableName11, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetTableName0 sets the "table_name0" field.
func (puo *ProductUpdateOne) SetTableName0(s string) *ProductUpdateOne {
	puo.mutation.SetTableName0(s)
	return puo
}

// SetTableName1 sets the "table_name1" field.
func (puo *ProductUpdateOne) SetTableName1(s string) *ProductUpdateOne {
	puo.mutation.SetTableName1(s)
	return puo
}

// SetTableName2 sets the "table_name2" field.
func (puo *ProductUpdateOne) SetTableName2(s string) *ProductUpdateOne {
	puo.mutation.SetTableName2(s)
	return puo
}

// SetTableName3 sets the "table_name3" field.
func (puo *ProductUpdateOne) SetTableName3(s string) *ProductUpdateOne {
	puo.mutation.SetTableName3(s)
	return puo
}

// SetTableName4 sets the "table_name4" field.
func (puo *ProductUpdateOne) SetTableName4(s string) *ProductUpdateOne {
	puo.mutation.SetTableName4(s)
	return puo
}

// SetTableName5 sets the "table_name5" field.
func (puo *ProductUpdateOne) SetTableName5(s string) *ProductUpdateOne {
	puo.mutation.SetTableName5(s)
	return puo
}

// SetTableName6 sets the "table_name6" field.
func (puo *ProductUpdateOne) SetTableName6(s string) *ProductUpdateOne {
	puo.mutation.SetTableName6(s)
	return puo
}

// SetTableName7 sets the "table_name7" field.
func (puo *ProductUpdateOne) SetTableName7(s string) *ProductUpdateOne {
	puo.mutation.SetTableName7(s)
	return puo
}

// SetTableName8 sets the "table_name8" field.
func (puo *ProductUpdateOne) SetTableName8(s string) *ProductUpdateOne {
	puo.mutation.SetTableName8(s)
	return puo
}

// SetTableName9 sets the "table_name9" field.
func (puo *ProductUpdateOne) SetTableName9(s string) *ProductUpdateOne {
	puo.mutation.SetTableName9(s)
	return puo
}

// SetTableName10 sets the "table_name10" field.
func (puo *ProductUpdateOne) SetTableName10(s string) *ProductUpdateOne {
	puo.mutation.SetTableName10(s)
	return puo
}

// SetTableName11 sets the "table_name11" field.
func (puo *ProductUpdateOne) SetTableName11(s string) *ProductUpdateOne {
	puo.mutation.SetTableName11(s)
	return puo
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.TableName0(); ok {
		_spec.SetField(product.FieldTableName0, field.TypeString, value)
	}
	if value, ok := puo.mutation.TableName1(); ok {
		_spec.SetField(product.FieldTableName1, field.TypeString, value)
	}
	if value, ok := puo.mutation.TableName2(); ok {
		_spec.SetField(product.FieldTableName2, field.TypeString, value)
	}
	if value, ok := puo.mutation.TableName3(); ok {
		_spec.SetField(product.FieldTableName3, field.TypeString, value)
	}
	if value, ok := puo.mutation.TableName4(); ok {
		_spec.SetField(product.FieldTableName4, field.TypeString, value)
	}
	if value, ok := puo.mutation.TableName5(); ok {
		_spec.SetField(product.FieldTableName5, field.TypeString, value)
	}
	if value, ok := puo.mutation.TableName6(); ok {
		_spec.SetField(product.FieldTableName6, field.TypeString, value)
	}
	if value, ok := puo.mutation.TableName7(); ok {
		_spec.SetField(product.FieldTableName7, field.TypeString, value)
	}
	if value, ok := puo.mutation.TableName8(); ok {
		_spec.SetField(product.FieldTableName8, field.TypeString, value)
	}
	if value, ok := puo.mutation.TableName9(); ok {
		_spec.SetField(product.FieldTableName9, field.TypeString, value)
	}
	if value, ok := puo.mutation.TableName10(); ok {
		_spec.SetField(product.FieldTableName10, field.TypeString, value)
	}
	if value, ok := puo.mutation.TableName11(); ok {
		_spec.SetField(product.FieldTableName11, field.TypeString, value)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}

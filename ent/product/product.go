// Code generated by ent, DO NOT EDIT.

package product

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTableName0 holds the string denoting the table_name0 field in the database.
	FieldTableName0 = "table_name0"
	// FieldTableName1 holds the string denoting the table_name1 field in the database.
	FieldTableName1 = "table_name1"
	// FieldTableName2 holds the string denoting the table_name2 field in the database.
	FieldTableName2 = "table_name2"
	// FieldTableName3 holds the string denoting the table_name3 field in the database.
	FieldTableName3 = "table_name3"
	// FieldTableName4 holds the string denoting the table_name4 field in the database.
	FieldTableName4 = "table_name4"
	// FieldTableName5 holds the string denoting the table_name5 field in the database.
	FieldTableName5 = "table_name5"
	// FieldTableName6 holds the string denoting the table_name6 field in the database.
	FieldTableName6 = "table_name6"
	// FieldTableName7 holds the string denoting the table_name7 field in the database.
	FieldTableName7 = "table_name7"
	// FieldTableName8 holds the string denoting the table_name8 field in the database.
	FieldTableName8 = "table_name8"
	// FieldTableName9 holds the string denoting the table_name9 field in the database.
	FieldTableName9 = "table_name9"
	// FieldTableName10 holds the string denoting the table_name10 field in the database.
	FieldTableName10 = "table_name10"
	// FieldTableName11 holds the string denoting the table_name11 field in the database.
	FieldTableName11 = "table_name11"
	// Table holds the table name of the product in the database.
	Table = "products"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldTableName0,
	FieldTableName1,
	FieldTableName2,
	FieldTableName3,
	FieldTableName4,
	FieldTableName5,
	FieldTableName6,
	FieldTableName7,
	FieldTableName8,
	FieldTableName9,
	FieldTableName10,
	FieldTableName11,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTableName0 orders the results by the table_name0 field.
func ByTableName0(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName0, opts...).ToFunc()
}

// ByTableName1 orders the results by the table_name1 field.
func ByTableName1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName1, opts...).ToFunc()
}

// ByTableName2 orders the results by the table_name2 field.
func ByTableName2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName2, opts...).ToFunc()
}

// ByTableName3 orders the results by the table_name3 field.
func ByTableName3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName3, opts...).ToFunc()
}

// ByTableName4 orders the results by the table_name4 field.
func ByTableName4(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName4, opts...).ToFunc()
}

// ByTableName5 orders the results by the table_name5 field.
func ByTableName5(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName5, opts...).ToFunc()
}

// ByTableName6 orders the results by the table_name6 field.
func ByTableName6(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName6, opts...).ToFunc()
}

// ByTableName7 orders the results by the table_name7 field.
func ByTableName7(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName7, opts...).ToFunc()
}

// ByTableName8 orders the results by the table_name8 field.
func ByTableName8(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName8, opts...).ToFunc()
}

// ByTableName9 orders the results by the table_name9 field.
func ByTableName9(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName9, opts...).ToFunc()
}

// ByTableName10 orders the results by the table_name10 field.
func ByTableName10(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName10, opts...).ToFunc()
}

// ByTableName11 orders the results by the table_name11 field.
func ByTableName11(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName11, opts...).ToFunc()
}

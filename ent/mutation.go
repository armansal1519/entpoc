// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entpoc/ent/predicate"
	"entpoc/ent/product"
	"entpoc/ent/user"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeProduct = "Product"
	TypeUser    = "User"
)

// ProductMutation represents an operation that mutates the Product nodes in the graph.
type ProductMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	table_name0   *string
	table_name1   *string
	table_name2   *string
	table_name3   *string
	table_name4   *string
	table_name5   *string
	table_name6   *string
	table_name7   *string
	table_name8   *string
	table_name9   *string
	table_name10  *string
	table_name11  *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Product, error)
	predicates    []predicate.Product
}

var _ ent.Mutation = (*ProductMutation)(nil)

// productOption allows management of the mutation configuration using functional options.
type productOption func(*ProductMutation)

// newProductMutation creates new mutation for the Product entity.
func newProductMutation(c config, op Op, opts ...productOption) *ProductMutation {
	m := &ProductMutation{
		config:        c,
		op:            op,
		typ:           TypeProduct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductID sets the ID field of the mutation.
func withProductID(id int) productOption {
	return func(m *ProductMutation) {
		var (
			err   error
			once  sync.Once
			value *Product
		)
		m.oldValue = func(ctx context.Context) (*Product, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Product.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProduct sets the old Product of the mutation.
func withProduct(node *Product) productOption {
	return func(m *ProductMutation) {
		m.oldValue = func(context.Context) (*Product, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProductMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProductMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Product.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProductMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProductMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProductMutation) ResetName() {
	m.name = nil
}

// SetTableName0 sets the "table_name0" field.
func (m *ProductMutation) SetTableName0(s string) {
	m.table_name0 = &s
}

// TableName0 returns the value of the "table_name0" field in the mutation.
func (m *ProductMutation) TableName0() (r string, exists bool) {
	v := m.table_name0
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName0 returns the old "table_name0" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldTableName0(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName0: %w", err)
	}
	return oldValue.TableName0, nil
}

// ResetTableName0 resets all changes to the "table_name0" field.
func (m *ProductMutation) ResetTableName0() {
	m.table_name0 = nil
}

// SetTableName1 sets the "table_name1" field.
func (m *ProductMutation) SetTableName1(s string) {
	m.table_name1 = &s
}

// TableName1 returns the value of the "table_name1" field in the mutation.
func (m *ProductMutation) TableName1() (r string, exists bool) {
	v := m.table_name1
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName1 returns the old "table_name1" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldTableName1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName1: %w", err)
	}
	return oldValue.TableName1, nil
}

// ResetTableName1 resets all changes to the "table_name1" field.
func (m *ProductMutation) ResetTableName1() {
	m.table_name1 = nil
}

// SetTableName2 sets the "table_name2" field.
func (m *ProductMutation) SetTableName2(s string) {
	m.table_name2 = &s
}

// TableName2 returns the value of the "table_name2" field in the mutation.
func (m *ProductMutation) TableName2() (r string, exists bool) {
	v := m.table_name2
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName2 returns the old "table_name2" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldTableName2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName2: %w", err)
	}
	return oldValue.TableName2, nil
}

// ResetTableName2 resets all changes to the "table_name2" field.
func (m *ProductMutation) ResetTableName2() {
	m.table_name2 = nil
}

// SetTableName3 sets the "table_name3" field.
func (m *ProductMutation) SetTableName3(s string) {
	m.table_name3 = &s
}

// TableName3 returns the value of the "table_name3" field in the mutation.
func (m *ProductMutation) TableName3() (r string, exists bool) {
	v := m.table_name3
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName3 returns the old "table_name3" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldTableName3(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName3: %w", err)
	}
	return oldValue.TableName3, nil
}

// ResetTableName3 resets all changes to the "table_name3" field.
func (m *ProductMutation) ResetTableName3() {
	m.table_name3 = nil
}

// SetTableName4 sets the "table_name4" field.
func (m *ProductMutation) SetTableName4(s string) {
	m.table_name4 = &s
}

// TableName4 returns the value of the "table_name4" field in the mutation.
func (m *ProductMutation) TableName4() (r string, exists bool) {
	v := m.table_name4
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName4 returns the old "table_name4" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldTableName4(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName4: %w", err)
	}
	return oldValue.TableName4, nil
}

// ResetTableName4 resets all changes to the "table_name4" field.
func (m *ProductMutation) ResetTableName4() {
	m.table_name4 = nil
}

// SetTableName5 sets the "table_name5" field.
func (m *ProductMutation) SetTableName5(s string) {
	m.table_name5 = &s
}

// TableName5 returns the value of the "table_name5" field in the mutation.
func (m *ProductMutation) TableName5() (r string, exists bool) {
	v := m.table_name5
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName5 returns the old "table_name5" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldTableName5(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName5: %w", err)
	}
	return oldValue.TableName5, nil
}

// ResetTableName5 resets all changes to the "table_name5" field.
func (m *ProductMutation) ResetTableName5() {
	m.table_name5 = nil
}

// SetTableName6 sets the "table_name6" field.
func (m *ProductMutation) SetTableName6(s string) {
	m.table_name6 = &s
}

// TableName6 returns the value of the "table_name6" field in the mutation.
func (m *ProductMutation) TableName6() (r string, exists bool) {
	v := m.table_name6
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName6 returns the old "table_name6" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldTableName6(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName6 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName6 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName6: %w", err)
	}
	return oldValue.TableName6, nil
}

// ResetTableName6 resets all changes to the "table_name6" field.
func (m *ProductMutation) ResetTableName6() {
	m.table_name6 = nil
}

// SetTableName7 sets the "table_name7" field.
func (m *ProductMutation) SetTableName7(s string) {
	m.table_name7 = &s
}

// TableName7 returns the value of the "table_name7" field in the mutation.
func (m *ProductMutation) TableName7() (r string, exists bool) {
	v := m.table_name7
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName7 returns the old "table_name7" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldTableName7(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName7 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName7 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName7: %w", err)
	}
	return oldValue.TableName7, nil
}

// ResetTableName7 resets all changes to the "table_name7" field.
func (m *ProductMutation) ResetTableName7() {
	m.table_name7 = nil
}

// SetTableName8 sets the "table_name8" field.
func (m *ProductMutation) SetTableName8(s string) {
	m.table_name8 = &s
}

// TableName8 returns the value of the "table_name8" field in the mutation.
func (m *ProductMutation) TableName8() (r string, exists bool) {
	v := m.table_name8
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName8 returns the old "table_name8" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldTableName8(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName8 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName8 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName8: %w", err)
	}
	return oldValue.TableName8, nil
}

// ResetTableName8 resets all changes to the "table_name8" field.
func (m *ProductMutation) ResetTableName8() {
	m.table_name8 = nil
}

// SetTableName9 sets the "table_name9" field.
func (m *ProductMutation) SetTableName9(s string) {
	m.table_name9 = &s
}

// TableName9 returns the value of the "table_name9" field in the mutation.
func (m *ProductMutation) TableName9() (r string, exists bool) {
	v := m.table_name9
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName9 returns the old "table_name9" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldTableName9(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName9 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName9 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName9: %w", err)
	}
	return oldValue.TableName9, nil
}

// ResetTableName9 resets all changes to the "table_name9" field.
func (m *ProductMutation) ResetTableName9() {
	m.table_name9 = nil
}

// SetTableName10 sets the "table_name10" field.
func (m *ProductMutation) SetTableName10(s string) {
	m.table_name10 = &s
}

// TableName10 returns the value of the "table_name10" field in the mutation.
func (m *ProductMutation) TableName10() (r string, exists bool) {
	v := m.table_name10
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName10 returns the old "table_name10" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldTableName10(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName10 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName10 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName10: %w", err)
	}
	return oldValue.TableName10, nil
}

// ResetTableName10 resets all changes to the "table_name10" field.
func (m *ProductMutation) ResetTableName10() {
	m.table_name10 = nil
}

// SetTableName11 sets the "table_name11" field.
func (m *ProductMutation) SetTableName11(s string) {
	m.table_name11 = &s
}

// TableName11 returns the value of the "table_name11" field in the mutation.
func (m *ProductMutation) TableName11() (r string, exists bool) {
	v := m.table_name11
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName11 returns the old "table_name11" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldTableName11(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName11 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName11 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName11: %w", err)
	}
	return oldValue.TableName11, nil
}

// ResetTableName11 resets all changes to the "table_name11" field.
func (m *ProductMutation) ResetTableName11() {
	m.table_name11 = nil
}

// Where appends a list predicates to the ProductMutation builder.
func (m *ProductMutation) Where(ps ...predicate.Product) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProductMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProductMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Product, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProductMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProductMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Product).
func (m *ProductMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProductMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.name != nil {
		fields = append(fields, product.FieldName)
	}
	if m.table_name0 != nil {
		fields = append(fields, product.FieldTableName0)
	}
	if m.table_name1 != nil {
		fields = append(fields, product.FieldTableName1)
	}
	if m.table_name2 != nil {
		fields = append(fields, product.FieldTableName2)
	}
	if m.table_name3 != nil {
		fields = append(fields, product.FieldTableName3)
	}
	if m.table_name4 != nil {
		fields = append(fields, product.FieldTableName4)
	}
	if m.table_name5 != nil {
		fields = append(fields, product.FieldTableName5)
	}
	if m.table_name6 != nil {
		fields = append(fields, product.FieldTableName6)
	}
	if m.table_name7 != nil {
		fields = append(fields, product.FieldTableName7)
	}
	if m.table_name8 != nil {
		fields = append(fields, product.FieldTableName8)
	}
	if m.table_name9 != nil {
		fields = append(fields, product.FieldTableName9)
	}
	if m.table_name10 != nil {
		fields = append(fields, product.FieldTableName10)
	}
	if m.table_name11 != nil {
		fields = append(fields, product.FieldTableName11)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProductMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case product.FieldName:
		return m.Name()
	case product.FieldTableName0:
		return m.TableName0()
	case product.FieldTableName1:
		return m.TableName1()
	case product.FieldTableName2:
		return m.TableName2()
	case product.FieldTableName3:
		return m.TableName3()
	case product.FieldTableName4:
		return m.TableName4()
	case product.FieldTableName5:
		return m.TableName5()
	case product.FieldTableName6:
		return m.TableName6()
	case product.FieldTableName7:
		return m.TableName7()
	case product.FieldTableName8:
		return m.TableName8()
	case product.FieldTableName9:
		return m.TableName9()
	case product.FieldTableName10:
		return m.TableName10()
	case product.FieldTableName11:
		return m.TableName11()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProductMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case product.FieldName:
		return m.OldName(ctx)
	case product.FieldTableName0:
		return m.OldTableName0(ctx)
	case product.FieldTableName1:
		return m.OldTableName1(ctx)
	case product.FieldTableName2:
		return m.OldTableName2(ctx)
	case product.FieldTableName3:
		return m.OldTableName3(ctx)
	case product.FieldTableName4:
		return m.OldTableName4(ctx)
	case product.FieldTableName5:
		return m.OldTableName5(ctx)
	case product.FieldTableName6:
		return m.OldTableName6(ctx)
	case product.FieldTableName7:
		return m.OldTableName7(ctx)
	case product.FieldTableName8:
		return m.OldTableName8(ctx)
	case product.FieldTableName9:
		return m.OldTableName9(ctx)
	case product.FieldTableName10:
		return m.OldTableName10(ctx)
	case product.FieldTableName11:
		return m.OldTableName11(ctx)
	}
	return nil, fmt.Errorf("unknown Product field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) SetField(name string, value ent.Value) error {
	switch name {
	case product.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case product.FieldTableName0:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName0(v)
		return nil
	case product.FieldTableName1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName1(v)
		return nil
	case product.FieldTableName2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName2(v)
		return nil
	case product.FieldTableName3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName3(v)
		return nil
	case product.FieldTableName4:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName4(v)
		return nil
	case product.FieldTableName5:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName5(v)
		return nil
	case product.FieldTableName6:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName6(v)
		return nil
	case product.FieldTableName7:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName7(v)
		return nil
	case product.FieldTableName8:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName8(v)
		return nil
	case product.FieldTableName9:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName9(v)
		return nil
	case product.FieldTableName10:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName10(v)
		return nil
	case product.FieldTableName11:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName11(v)
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProductMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProductMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Product numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProductMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProductMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Product nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProductMutation) ResetField(name string) error {
	switch name {
	case product.FieldName:
		m.ResetName()
		return nil
	case product.FieldTableName0:
		m.ResetTableName0()
		return nil
	case product.FieldTableName1:
		m.ResetTableName1()
		return nil
	case product.FieldTableName2:
		m.ResetTableName2()
		return nil
	case product.FieldTableName3:
		m.ResetTableName3()
		return nil
	case product.FieldTableName4:
		m.ResetTableName4()
		return nil
	case product.FieldTableName5:
		m.ResetTableName5()
		return nil
	case product.FieldTableName6:
		m.ResetTableName6()
		return nil
	case product.FieldTableName7:
		m.ResetTableName7()
		return nil
	case product.FieldTableName8:
		m.ResetTableName8()
		return nil
	case product.FieldTableName9:
		m.ResetTableName9()
		return nil
	case product.FieldTableName10:
		m.ResetTableName10()
		return nil
	case product.FieldTableName11:
		m.ResetTableName11()
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProductMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProductMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProductMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProductMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProductMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProductMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProductMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Product unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProductMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Product edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	name                 *string
	table_name0          *string
	table_name1          *string
	table_name2          *int
	addtable_name2       *int
	table_name3          *string
	table_name4          *string
	table_name5          *string
	table_name6          *string
	table_name7          *string
	table_name8          *string
	table_name9          *string
	table_name10         *string
	table_name11         *string
	table_name12         *string
	table_name13         *string
	table_name14         *string
	table_name15         *string
	table_name16         *string
	table_name17         *string
	table_name18         *string
	table_name19         *string
	table_name20         *string
	table_name21         *string
	table_name22         *string
	table_name23         *string
	table_name24         *string
	table_name25         *string
	table_name26         *string
	table_name27         *string
	table_name28         *string
	table_name29         *string
	table_name30         *string
	table_name31         *string
	table_name32         *string
	table_name33         *string
	table_name34         *string
	table_name35         *string
	table_name36         *string
	table_name37         *string
	table_name38         *string
	table_name39         *string
	table_name40         *string
	table_name41         *string
	table_name42         *string
	altered_table_name43 *string
	table_name44         *string
	table_name45         *string
	table_name46         *string
	table_name47         *string
	table_name48         *string
	table_name49         *string
	altered_table_name50 *string
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetTableName0 sets the "table_name0" field.
func (m *UserMutation) SetTableName0(s string) {
	m.table_name0 = &s
}

// TableName0 returns the value of the "table_name0" field in the mutation.
func (m *UserMutation) TableName0() (r string, exists bool) {
	v := m.table_name0
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName0 returns the old "table_name0" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName0(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName0: %w", err)
	}
	return oldValue.TableName0, nil
}

// ResetTableName0 resets all changes to the "table_name0" field.
func (m *UserMutation) ResetTableName0() {
	m.table_name0 = nil
}

// SetTableName1 sets the "table_name1" field.
func (m *UserMutation) SetTableName1(s string) {
	m.table_name1 = &s
}

// TableName1 returns the value of the "table_name1" field in the mutation.
func (m *UserMutation) TableName1() (r string, exists bool) {
	v := m.table_name1
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName1 returns the old "table_name1" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName1: %w", err)
	}
	return oldValue.TableName1, nil
}

// ResetTableName1 resets all changes to the "table_name1" field.
func (m *UserMutation) ResetTableName1() {
	m.table_name1 = nil
}

// SetTableName2 sets the "table_name2" field.
func (m *UserMutation) SetTableName2(i int) {
	m.table_name2 = &i
	m.addtable_name2 = nil
}

// TableName2 returns the value of the "table_name2" field in the mutation.
func (m *UserMutation) TableName2() (r int, exists bool) {
	v := m.table_name2
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName2 returns the old "table_name2" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName2(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName2: %w", err)
	}
	return oldValue.TableName2, nil
}

// AddTableName2 adds i to the "table_name2" field.
func (m *UserMutation) AddTableName2(i int) {
	if m.addtable_name2 != nil {
		*m.addtable_name2 += i
	} else {
		m.addtable_name2 = &i
	}
}

// AddedTableName2 returns the value that was added to the "table_name2" field in this mutation.
func (m *UserMutation) AddedTableName2() (r int, exists bool) {
	v := m.addtable_name2
	if v == nil {
		return
	}
	return *v, true
}

// ResetTableName2 resets all changes to the "table_name2" field.
func (m *UserMutation) ResetTableName2() {
	m.table_name2 = nil
	m.addtable_name2 = nil
}

// SetTableName3 sets the "table_name3" field.
func (m *UserMutation) SetTableName3(s string) {
	m.table_name3 = &s
}

// TableName3 returns the value of the "table_name3" field in the mutation.
func (m *UserMutation) TableName3() (r string, exists bool) {
	v := m.table_name3
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName3 returns the old "table_name3" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName3(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName3: %w", err)
	}
	return oldValue.TableName3, nil
}

// ResetTableName3 resets all changes to the "table_name3" field.
func (m *UserMutation) ResetTableName3() {
	m.table_name3 = nil
}

// SetTableName4 sets the "table_name4" field.
func (m *UserMutation) SetTableName4(s string) {
	m.table_name4 = &s
}

// TableName4 returns the value of the "table_name4" field in the mutation.
func (m *UserMutation) TableName4() (r string, exists bool) {
	v := m.table_name4
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName4 returns the old "table_name4" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName4(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName4: %w", err)
	}
	return oldValue.TableName4, nil
}

// ResetTableName4 resets all changes to the "table_name4" field.
func (m *UserMutation) ResetTableName4() {
	m.table_name4 = nil
}

// SetTableName5 sets the "table_name5" field.
func (m *UserMutation) SetTableName5(s string) {
	m.table_name5 = &s
}

// TableName5 returns the value of the "table_name5" field in the mutation.
func (m *UserMutation) TableName5() (r string, exists bool) {
	v := m.table_name5
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName5 returns the old "table_name5" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName5(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName5: %w", err)
	}
	return oldValue.TableName5, nil
}

// ResetTableName5 resets all changes to the "table_name5" field.
func (m *UserMutation) ResetTableName5() {
	m.table_name5 = nil
}

// SetTableName6 sets the "table_name6" field.
func (m *UserMutation) SetTableName6(s string) {
	m.table_name6 = &s
}

// TableName6 returns the value of the "table_name6" field in the mutation.
func (m *UserMutation) TableName6() (r string, exists bool) {
	v := m.table_name6
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName6 returns the old "table_name6" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName6(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName6 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName6 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName6: %w", err)
	}
	return oldValue.TableName6, nil
}

// ResetTableName6 resets all changes to the "table_name6" field.
func (m *UserMutation) ResetTableName6() {
	m.table_name6 = nil
}

// SetTableName7 sets the "table_name7" field.
func (m *UserMutation) SetTableName7(s string) {
	m.table_name7 = &s
}

// TableName7 returns the value of the "table_name7" field in the mutation.
func (m *UserMutation) TableName7() (r string, exists bool) {
	v := m.table_name7
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName7 returns the old "table_name7" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName7(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName7 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName7 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName7: %w", err)
	}
	return oldValue.TableName7, nil
}

// ResetTableName7 resets all changes to the "table_name7" field.
func (m *UserMutation) ResetTableName7() {
	m.table_name7 = nil
}

// SetTableName8 sets the "table_name8" field.
func (m *UserMutation) SetTableName8(s string) {
	m.table_name8 = &s
}

// TableName8 returns the value of the "table_name8" field in the mutation.
func (m *UserMutation) TableName8() (r string, exists bool) {
	v := m.table_name8
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName8 returns the old "table_name8" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName8(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName8 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName8 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName8: %w", err)
	}
	return oldValue.TableName8, nil
}

// ResetTableName8 resets all changes to the "table_name8" field.
func (m *UserMutation) ResetTableName8() {
	m.table_name8 = nil
}

// SetTableName9 sets the "table_name9" field.
func (m *UserMutation) SetTableName9(s string) {
	m.table_name9 = &s
}

// TableName9 returns the value of the "table_name9" field in the mutation.
func (m *UserMutation) TableName9() (r string, exists bool) {
	v := m.table_name9
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName9 returns the old "table_name9" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName9(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName9 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName9 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName9: %w", err)
	}
	return oldValue.TableName9, nil
}

// ResetTableName9 resets all changes to the "table_name9" field.
func (m *UserMutation) ResetTableName9() {
	m.table_name9 = nil
}

// SetTableName10 sets the "table_name10" field.
func (m *UserMutation) SetTableName10(s string) {
	m.table_name10 = &s
}

// TableName10 returns the value of the "table_name10" field in the mutation.
func (m *UserMutation) TableName10() (r string, exists bool) {
	v := m.table_name10
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName10 returns the old "table_name10" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName10(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName10 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName10 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName10: %w", err)
	}
	return oldValue.TableName10, nil
}

// ResetTableName10 resets all changes to the "table_name10" field.
func (m *UserMutation) ResetTableName10() {
	m.table_name10 = nil
}

// SetTableName11 sets the "table_name11" field.
func (m *UserMutation) SetTableName11(s string) {
	m.table_name11 = &s
}

// TableName11 returns the value of the "table_name11" field in the mutation.
func (m *UserMutation) TableName11() (r string, exists bool) {
	v := m.table_name11
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName11 returns the old "table_name11" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName11(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName11 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName11 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName11: %w", err)
	}
	return oldValue.TableName11, nil
}

// ResetTableName11 resets all changes to the "table_name11" field.
func (m *UserMutation) ResetTableName11() {
	m.table_name11 = nil
}

// SetTableName12 sets the "table_name12" field.
func (m *UserMutation) SetTableName12(s string) {
	m.table_name12 = &s
}

// TableName12 returns the value of the "table_name12" field in the mutation.
func (m *UserMutation) TableName12() (r string, exists bool) {
	v := m.table_name12
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName12 returns the old "table_name12" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName12(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName12 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName12 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName12: %w", err)
	}
	return oldValue.TableName12, nil
}

// ResetTableName12 resets all changes to the "table_name12" field.
func (m *UserMutation) ResetTableName12() {
	m.table_name12 = nil
}

// SetTableName13 sets the "table_name13" field.
func (m *UserMutation) SetTableName13(s string) {
	m.table_name13 = &s
}

// TableName13 returns the value of the "table_name13" field in the mutation.
func (m *UserMutation) TableName13() (r string, exists bool) {
	v := m.table_name13
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName13 returns the old "table_name13" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName13(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName13 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName13 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName13: %w", err)
	}
	return oldValue.TableName13, nil
}

// ResetTableName13 resets all changes to the "table_name13" field.
func (m *UserMutation) ResetTableName13() {
	m.table_name13 = nil
}

// SetTableName14 sets the "table_name14" field.
func (m *UserMutation) SetTableName14(s string) {
	m.table_name14 = &s
}

// TableName14 returns the value of the "table_name14" field in the mutation.
func (m *UserMutation) TableName14() (r string, exists bool) {
	v := m.table_name14
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName14 returns the old "table_name14" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName14(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName14 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName14 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName14: %w", err)
	}
	return oldValue.TableName14, nil
}

// ResetTableName14 resets all changes to the "table_name14" field.
func (m *UserMutation) ResetTableName14() {
	m.table_name14 = nil
}

// SetTableName15 sets the "table_name15" field.
func (m *UserMutation) SetTableName15(s string) {
	m.table_name15 = &s
}

// TableName15 returns the value of the "table_name15" field in the mutation.
func (m *UserMutation) TableName15() (r string, exists bool) {
	v := m.table_name15
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName15 returns the old "table_name15" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName15(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName15 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName15 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName15: %w", err)
	}
	return oldValue.TableName15, nil
}

// ResetTableName15 resets all changes to the "table_name15" field.
func (m *UserMutation) ResetTableName15() {
	m.table_name15 = nil
}

// SetTableName16 sets the "table_name16" field.
func (m *UserMutation) SetTableName16(s string) {
	m.table_name16 = &s
}

// TableName16 returns the value of the "table_name16" field in the mutation.
func (m *UserMutation) TableName16() (r string, exists bool) {
	v := m.table_name16
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName16 returns the old "table_name16" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName16(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName16 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName16 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName16: %w", err)
	}
	return oldValue.TableName16, nil
}

// ResetTableName16 resets all changes to the "table_name16" field.
func (m *UserMutation) ResetTableName16() {
	m.table_name16 = nil
}

// SetTableName17 sets the "table_name17" field.
func (m *UserMutation) SetTableName17(s string) {
	m.table_name17 = &s
}

// TableName17 returns the value of the "table_name17" field in the mutation.
func (m *UserMutation) TableName17() (r string, exists bool) {
	v := m.table_name17
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName17 returns the old "table_name17" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName17(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName17 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName17 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName17: %w", err)
	}
	return oldValue.TableName17, nil
}

// ResetTableName17 resets all changes to the "table_name17" field.
func (m *UserMutation) ResetTableName17() {
	m.table_name17 = nil
}

// SetTableName18 sets the "table_name18" field.
func (m *UserMutation) SetTableName18(s string) {
	m.table_name18 = &s
}

// TableName18 returns the value of the "table_name18" field in the mutation.
func (m *UserMutation) TableName18() (r string, exists bool) {
	v := m.table_name18
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName18 returns the old "table_name18" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName18(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName18 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName18 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName18: %w", err)
	}
	return oldValue.TableName18, nil
}

// ResetTableName18 resets all changes to the "table_name18" field.
func (m *UserMutation) ResetTableName18() {
	m.table_name18 = nil
}

// SetTableName19 sets the "table_name19" field.
func (m *UserMutation) SetTableName19(s string) {
	m.table_name19 = &s
}

// TableName19 returns the value of the "table_name19" field in the mutation.
func (m *UserMutation) TableName19() (r string, exists bool) {
	v := m.table_name19
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName19 returns the old "table_name19" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName19(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName19 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName19 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName19: %w", err)
	}
	return oldValue.TableName19, nil
}

// ResetTableName19 resets all changes to the "table_name19" field.
func (m *UserMutation) ResetTableName19() {
	m.table_name19 = nil
}

// SetTableName20 sets the "table_name20" field.
func (m *UserMutation) SetTableName20(s string) {
	m.table_name20 = &s
}

// TableName20 returns the value of the "table_name20" field in the mutation.
func (m *UserMutation) TableName20() (r string, exists bool) {
	v := m.table_name20
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName20 returns the old "table_name20" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName20(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName20 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName20 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName20: %w", err)
	}
	return oldValue.TableName20, nil
}

// ResetTableName20 resets all changes to the "table_name20" field.
func (m *UserMutation) ResetTableName20() {
	m.table_name20 = nil
}

// SetTableName21 sets the "table_name21" field.
func (m *UserMutation) SetTableName21(s string) {
	m.table_name21 = &s
}

// TableName21 returns the value of the "table_name21" field in the mutation.
func (m *UserMutation) TableName21() (r string, exists bool) {
	v := m.table_name21
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName21 returns the old "table_name21" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName21(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName21 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName21 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName21: %w", err)
	}
	return oldValue.TableName21, nil
}

// ResetTableName21 resets all changes to the "table_name21" field.
func (m *UserMutation) ResetTableName21() {
	m.table_name21 = nil
}

// SetTableName22 sets the "table_name22" field.
func (m *UserMutation) SetTableName22(s string) {
	m.table_name22 = &s
}

// TableName22 returns the value of the "table_name22" field in the mutation.
func (m *UserMutation) TableName22() (r string, exists bool) {
	v := m.table_name22
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName22 returns the old "table_name22" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName22(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName22 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName22 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName22: %w", err)
	}
	return oldValue.TableName22, nil
}

// ResetTableName22 resets all changes to the "table_name22" field.
func (m *UserMutation) ResetTableName22() {
	m.table_name22 = nil
}

// SetTableName23 sets the "table_name23" field.
func (m *UserMutation) SetTableName23(s string) {
	m.table_name23 = &s
}

// TableName23 returns the value of the "table_name23" field in the mutation.
func (m *UserMutation) TableName23() (r string, exists bool) {
	v := m.table_name23
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName23 returns the old "table_name23" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName23(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName23 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName23 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName23: %w", err)
	}
	return oldValue.TableName23, nil
}

// ResetTableName23 resets all changes to the "table_name23" field.
func (m *UserMutation) ResetTableName23() {
	m.table_name23 = nil
}

// SetTableName24 sets the "table_name24" field.
func (m *UserMutation) SetTableName24(s string) {
	m.table_name24 = &s
}

// TableName24 returns the value of the "table_name24" field in the mutation.
func (m *UserMutation) TableName24() (r string, exists bool) {
	v := m.table_name24
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName24 returns the old "table_name24" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName24(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName24 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName24 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName24: %w", err)
	}
	return oldValue.TableName24, nil
}

// ResetTableName24 resets all changes to the "table_name24" field.
func (m *UserMutation) ResetTableName24() {
	m.table_name24 = nil
}

// SetTableName25 sets the "table_name25" field.
func (m *UserMutation) SetTableName25(s string) {
	m.table_name25 = &s
}

// TableName25 returns the value of the "table_name25" field in the mutation.
func (m *UserMutation) TableName25() (r string, exists bool) {
	v := m.table_name25
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName25 returns the old "table_name25" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName25(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName25 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName25 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName25: %w", err)
	}
	return oldValue.TableName25, nil
}

// ResetTableName25 resets all changes to the "table_name25" field.
func (m *UserMutation) ResetTableName25() {
	m.table_name25 = nil
}

// SetTableName26 sets the "table_name26" field.
func (m *UserMutation) SetTableName26(s string) {
	m.table_name26 = &s
}

// TableName26 returns the value of the "table_name26" field in the mutation.
func (m *UserMutation) TableName26() (r string, exists bool) {
	v := m.table_name26
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName26 returns the old "table_name26" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName26(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName26 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName26 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName26: %w", err)
	}
	return oldValue.TableName26, nil
}

// ResetTableName26 resets all changes to the "table_name26" field.
func (m *UserMutation) ResetTableName26() {
	m.table_name26 = nil
}

// SetTableName27 sets the "table_name27" field.
func (m *UserMutation) SetTableName27(s string) {
	m.table_name27 = &s
}

// TableName27 returns the value of the "table_name27" field in the mutation.
func (m *UserMutation) TableName27() (r string, exists bool) {
	v := m.table_name27
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName27 returns the old "table_name27" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName27(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName27 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName27 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName27: %w", err)
	}
	return oldValue.TableName27, nil
}

// ResetTableName27 resets all changes to the "table_name27" field.
func (m *UserMutation) ResetTableName27() {
	m.table_name27 = nil
}

// SetTableName28 sets the "table_name28" field.
func (m *UserMutation) SetTableName28(s string) {
	m.table_name28 = &s
}

// TableName28 returns the value of the "table_name28" field in the mutation.
func (m *UserMutation) TableName28() (r string, exists bool) {
	v := m.table_name28
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName28 returns the old "table_name28" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName28(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName28 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName28 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName28: %w", err)
	}
	return oldValue.TableName28, nil
}

// ResetTableName28 resets all changes to the "table_name28" field.
func (m *UserMutation) ResetTableName28() {
	m.table_name28 = nil
}

// SetTableName29 sets the "table_name29" field.
func (m *UserMutation) SetTableName29(s string) {
	m.table_name29 = &s
}

// TableName29 returns the value of the "table_name29" field in the mutation.
func (m *UserMutation) TableName29() (r string, exists bool) {
	v := m.table_name29
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName29 returns the old "table_name29" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName29(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName29 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName29 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName29: %w", err)
	}
	return oldValue.TableName29, nil
}

// ResetTableName29 resets all changes to the "table_name29" field.
func (m *UserMutation) ResetTableName29() {
	m.table_name29 = nil
}

// SetTableName30 sets the "table_name30" field.
func (m *UserMutation) SetTableName30(s string) {
	m.table_name30 = &s
}

// TableName30 returns the value of the "table_name30" field in the mutation.
func (m *UserMutation) TableName30() (r string, exists bool) {
	v := m.table_name30
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName30 returns the old "table_name30" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName30(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName30 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName30 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName30: %w", err)
	}
	return oldValue.TableName30, nil
}

// ResetTableName30 resets all changes to the "table_name30" field.
func (m *UserMutation) ResetTableName30() {
	m.table_name30 = nil
}

// SetTableName31 sets the "table_name31" field.
func (m *UserMutation) SetTableName31(s string) {
	m.table_name31 = &s
}

// TableName31 returns the value of the "table_name31" field in the mutation.
func (m *UserMutation) TableName31() (r string, exists bool) {
	v := m.table_name31
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName31 returns the old "table_name31" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName31(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName31 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName31 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName31: %w", err)
	}
	return oldValue.TableName31, nil
}

// ResetTableName31 resets all changes to the "table_name31" field.
func (m *UserMutation) ResetTableName31() {
	m.table_name31 = nil
}

// SetTableName32 sets the "table_name32" field.
func (m *UserMutation) SetTableName32(s string) {
	m.table_name32 = &s
}

// TableName32 returns the value of the "table_name32" field in the mutation.
func (m *UserMutation) TableName32() (r string, exists bool) {
	v := m.table_name32
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName32 returns the old "table_name32" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName32(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName32 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName32 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName32: %w", err)
	}
	return oldValue.TableName32, nil
}

// ResetTableName32 resets all changes to the "table_name32" field.
func (m *UserMutation) ResetTableName32() {
	m.table_name32 = nil
}

// SetTableName33 sets the "table_name33" field.
func (m *UserMutation) SetTableName33(s string) {
	m.table_name33 = &s
}

// TableName33 returns the value of the "table_name33" field in the mutation.
func (m *UserMutation) TableName33() (r string, exists bool) {
	v := m.table_name33
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName33 returns the old "table_name33" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName33(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName33 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName33 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName33: %w", err)
	}
	return oldValue.TableName33, nil
}

// ResetTableName33 resets all changes to the "table_name33" field.
func (m *UserMutation) ResetTableName33() {
	m.table_name33 = nil
}

// SetTableName34 sets the "table_name34" field.
func (m *UserMutation) SetTableName34(s string) {
	m.table_name34 = &s
}

// TableName34 returns the value of the "table_name34" field in the mutation.
func (m *UserMutation) TableName34() (r string, exists bool) {
	v := m.table_name34
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName34 returns the old "table_name34" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName34(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName34 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName34 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName34: %w", err)
	}
	return oldValue.TableName34, nil
}

// ResetTableName34 resets all changes to the "table_name34" field.
func (m *UserMutation) ResetTableName34() {
	m.table_name34 = nil
}

// SetTableName35 sets the "table_name35" field.
func (m *UserMutation) SetTableName35(s string) {
	m.table_name35 = &s
}

// TableName35 returns the value of the "table_name35" field in the mutation.
func (m *UserMutation) TableName35() (r string, exists bool) {
	v := m.table_name35
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName35 returns the old "table_name35" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName35(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName35 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName35 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName35: %w", err)
	}
	return oldValue.TableName35, nil
}

// ResetTableName35 resets all changes to the "table_name35" field.
func (m *UserMutation) ResetTableName35() {
	m.table_name35 = nil
}

// SetTableName36 sets the "table_name36" field.
func (m *UserMutation) SetTableName36(s string) {
	m.table_name36 = &s
}

// TableName36 returns the value of the "table_name36" field in the mutation.
func (m *UserMutation) TableName36() (r string, exists bool) {
	v := m.table_name36
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName36 returns the old "table_name36" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName36(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName36 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName36 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName36: %w", err)
	}
	return oldValue.TableName36, nil
}

// ResetTableName36 resets all changes to the "table_name36" field.
func (m *UserMutation) ResetTableName36() {
	m.table_name36 = nil
}

// SetTableName37 sets the "table_name37" field.
func (m *UserMutation) SetTableName37(s string) {
	m.table_name37 = &s
}

// TableName37 returns the value of the "table_name37" field in the mutation.
func (m *UserMutation) TableName37() (r string, exists bool) {
	v := m.table_name37
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName37 returns the old "table_name37" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName37(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName37 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName37 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName37: %w", err)
	}
	return oldValue.TableName37, nil
}

// ResetTableName37 resets all changes to the "table_name37" field.
func (m *UserMutation) ResetTableName37() {
	m.table_name37 = nil
}

// SetTableName38 sets the "table_name38" field.
func (m *UserMutation) SetTableName38(s string) {
	m.table_name38 = &s
}

// TableName38 returns the value of the "table_name38" field in the mutation.
func (m *UserMutation) TableName38() (r string, exists bool) {
	v := m.table_name38
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName38 returns the old "table_name38" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName38(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName38 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName38 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName38: %w", err)
	}
	return oldValue.TableName38, nil
}

// ResetTableName38 resets all changes to the "table_name38" field.
func (m *UserMutation) ResetTableName38() {
	m.table_name38 = nil
}

// SetTableName39 sets the "table_name39" field.
func (m *UserMutation) SetTableName39(s string) {
	m.table_name39 = &s
}

// TableName39 returns the value of the "table_name39" field in the mutation.
func (m *UserMutation) TableName39() (r string, exists bool) {
	v := m.table_name39
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName39 returns the old "table_name39" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName39(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName39 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName39 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName39: %w", err)
	}
	return oldValue.TableName39, nil
}

// ResetTableName39 resets all changes to the "table_name39" field.
func (m *UserMutation) ResetTableName39() {
	m.table_name39 = nil
}

// SetTableName40 sets the "table_name40" field.
func (m *UserMutation) SetTableName40(s string) {
	m.table_name40 = &s
}

// TableName40 returns the value of the "table_name40" field in the mutation.
func (m *UserMutation) TableName40() (r string, exists bool) {
	v := m.table_name40
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName40 returns the old "table_name40" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName40(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName40 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName40 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName40: %w", err)
	}
	return oldValue.TableName40, nil
}

// ResetTableName40 resets all changes to the "table_name40" field.
func (m *UserMutation) ResetTableName40() {
	m.table_name40 = nil
}

// SetTableName41 sets the "table_name41" field.
func (m *UserMutation) SetTableName41(s string) {
	m.table_name41 = &s
}

// TableName41 returns the value of the "table_name41" field in the mutation.
func (m *UserMutation) TableName41() (r string, exists bool) {
	v := m.table_name41
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName41 returns the old "table_name41" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName41(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName41 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName41 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName41: %w", err)
	}
	return oldValue.TableName41, nil
}

// ResetTableName41 resets all changes to the "table_name41" field.
func (m *UserMutation) ResetTableName41() {
	m.table_name41 = nil
}

// SetTableName42 sets the "table_name42" field.
func (m *UserMutation) SetTableName42(s string) {
	m.table_name42 = &s
}

// TableName42 returns the value of the "table_name42" field in the mutation.
func (m *UserMutation) TableName42() (r string, exists bool) {
	v := m.table_name42
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName42 returns the old "table_name42" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName42(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName42 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName42 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName42: %w", err)
	}
	return oldValue.TableName42, nil
}

// ResetTableName42 resets all changes to the "table_name42" field.
func (m *UserMutation) ResetTableName42() {
	m.table_name42 = nil
}

// SetAlteredTableName43 sets the "altered_table_name43" field.
func (m *UserMutation) SetAlteredTableName43(s string) {
	m.altered_table_name43 = &s
}

// AlteredTableName43 returns the value of the "altered_table_name43" field in the mutation.
func (m *UserMutation) AlteredTableName43() (r string, exists bool) {
	v := m.altered_table_name43
	if v == nil {
		return
	}
	return *v, true
}

// OldAlteredTableName43 returns the old "altered_table_name43" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAlteredTableName43(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlteredTableName43 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlteredTableName43 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlteredTableName43: %w", err)
	}
	return oldValue.AlteredTableName43, nil
}

// ResetAlteredTableName43 resets all changes to the "altered_table_name43" field.
func (m *UserMutation) ResetAlteredTableName43() {
	m.altered_table_name43 = nil
}

// SetTableName44 sets the "table_name44" field.
func (m *UserMutation) SetTableName44(s string) {
	m.table_name44 = &s
}

// TableName44 returns the value of the "table_name44" field in the mutation.
func (m *UserMutation) TableName44() (r string, exists bool) {
	v := m.table_name44
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName44 returns the old "table_name44" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName44(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName44 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName44 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName44: %w", err)
	}
	return oldValue.TableName44, nil
}

// ResetTableName44 resets all changes to the "table_name44" field.
func (m *UserMutation) ResetTableName44() {
	m.table_name44 = nil
}

// SetTableName45 sets the "table_name45" field.
func (m *UserMutation) SetTableName45(s string) {
	m.table_name45 = &s
}

// TableName45 returns the value of the "table_name45" field in the mutation.
func (m *UserMutation) TableName45() (r string, exists bool) {
	v := m.table_name45
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName45 returns the old "table_name45" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName45(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName45 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName45 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName45: %w", err)
	}
	return oldValue.TableName45, nil
}

// ResetTableName45 resets all changes to the "table_name45" field.
func (m *UserMutation) ResetTableName45() {
	m.table_name45 = nil
}

// SetTableName46 sets the "table_name46" field.
func (m *UserMutation) SetTableName46(s string) {
	m.table_name46 = &s
}

// TableName46 returns the value of the "table_name46" field in the mutation.
func (m *UserMutation) TableName46() (r string, exists bool) {
	v := m.table_name46
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName46 returns the old "table_name46" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName46(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName46 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName46 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName46: %w", err)
	}
	return oldValue.TableName46, nil
}

// ResetTableName46 resets all changes to the "table_name46" field.
func (m *UserMutation) ResetTableName46() {
	m.table_name46 = nil
}

// SetTableName47 sets the "table_name47" field.
func (m *UserMutation) SetTableName47(s string) {
	m.table_name47 = &s
}

// TableName47 returns the value of the "table_name47" field in the mutation.
func (m *UserMutation) TableName47() (r string, exists bool) {
	v := m.table_name47
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName47 returns the old "table_name47" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName47(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName47 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName47 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName47: %w", err)
	}
	return oldValue.TableName47, nil
}

// ResetTableName47 resets all changes to the "table_name47" field.
func (m *UserMutation) ResetTableName47() {
	m.table_name47 = nil
}

// SetTableName48 sets the "table_name48" field.
func (m *UserMutation) SetTableName48(s string) {
	m.table_name48 = &s
}

// TableName48 returns the value of the "table_name48" field in the mutation.
func (m *UserMutation) TableName48() (r string, exists bool) {
	v := m.table_name48
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName48 returns the old "table_name48" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName48(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName48 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName48 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName48: %w", err)
	}
	return oldValue.TableName48, nil
}

// ResetTableName48 resets all changes to the "table_name48" field.
func (m *UserMutation) ResetTableName48() {
	m.table_name48 = nil
}

// SetTableName49 sets the "table_name49" field.
func (m *UserMutation) SetTableName49(s string) {
	m.table_name49 = &s
}

// TableName49 returns the value of the "table_name49" field in the mutation.
func (m *UserMutation) TableName49() (r string, exists bool) {
	v := m.table_name49
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName49 returns the old "table_name49" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTableName49(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTableName49 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTableName49 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName49: %w", err)
	}
	return oldValue.TableName49, nil
}

// ResetTableName49 resets all changes to the "table_name49" field.
func (m *UserMutation) ResetTableName49() {
	m.table_name49 = nil
}

// SetAlteredTableName50 sets the "altered_table_name50" field.
func (m *UserMutation) SetAlteredTableName50(s string) {
	m.altered_table_name50 = &s
}

// AlteredTableName50 returns the value of the "altered_table_name50" field in the mutation.
func (m *UserMutation) AlteredTableName50() (r string, exists bool) {
	v := m.altered_table_name50
	if v == nil {
		return
	}
	return *v, true
}

// OldAlteredTableName50 returns the old "altered_table_name50" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAlteredTableName50(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlteredTableName50 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlteredTableName50 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlteredTableName50: %w", err)
	}
	return oldValue.AlteredTableName50, nil
}

// ResetAlteredTableName50 resets all changes to the "altered_table_name50" field.
func (m *UserMutation) ResetAlteredTableName50() {
	m.altered_table_name50 = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 52)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.table_name0 != nil {
		fields = append(fields, user.FieldTableName0)
	}
	if m.table_name1 != nil {
		fields = append(fields, user.FieldTableName1)
	}
	if m.table_name2 != nil {
		fields = append(fields, user.FieldTableName2)
	}
	if m.table_name3 != nil {
		fields = append(fields, user.FieldTableName3)
	}
	if m.table_name4 != nil {
		fields = append(fields, user.FieldTableName4)
	}
	if m.table_name5 != nil {
		fields = append(fields, user.FieldTableName5)
	}
	if m.table_name6 != nil {
		fields = append(fields, user.FieldTableName6)
	}
	if m.table_name7 != nil {
		fields = append(fields, user.FieldTableName7)
	}
	if m.table_name8 != nil {
		fields = append(fields, user.FieldTableName8)
	}
	if m.table_name9 != nil {
		fields = append(fields, user.FieldTableName9)
	}
	if m.table_name10 != nil {
		fields = append(fields, user.FieldTableName10)
	}
	if m.table_name11 != nil {
		fields = append(fields, user.FieldTableName11)
	}
	if m.table_name12 != nil {
		fields = append(fields, user.FieldTableName12)
	}
	if m.table_name13 != nil {
		fields = append(fields, user.FieldTableName13)
	}
	if m.table_name14 != nil {
		fields = append(fields, user.FieldTableName14)
	}
	if m.table_name15 != nil {
		fields = append(fields, user.FieldTableName15)
	}
	if m.table_name16 != nil {
		fields = append(fields, user.FieldTableName16)
	}
	if m.table_name17 != nil {
		fields = append(fields, user.FieldTableName17)
	}
	if m.table_name18 != nil {
		fields = append(fields, user.FieldTableName18)
	}
	if m.table_name19 != nil {
		fields = append(fields, user.FieldTableName19)
	}
	if m.table_name20 != nil {
		fields = append(fields, user.FieldTableName20)
	}
	if m.table_name21 != nil {
		fields = append(fields, user.FieldTableName21)
	}
	if m.table_name22 != nil {
		fields = append(fields, user.FieldTableName22)
	}
	if m.table_name23 != nil {
		fields = append(fields, user.FieldTableName23)
	}
	if m.table_name24 != nil {
		fields = append(fields, user.FieldTableName24)
	}
	if m.table_name25 != nil {
		fields = append(fields, user.FieldTableName25)
	}
	if m.table_name26 != nil {
		fields = append(fields, user.FieldTableName26)
	}
	if m.table_name27 != nil {
		fields = append(fields, user.FieldTableName27)
	}
	if m.table_name28 != nil {
		fields = append(fields, user.FieldTableName28)
	}
	if m.table_name29 != nil {
		fields = append(fields, user.FieldTableName29)
	}
	if m.table_name30 != nil {
		fields = append(fields, user.FieldTableName30)
	}
	if m.table_name31 != nil {
		fields = append(fields, user.FieldTableName31)
	}
	if m.table_name32 != nil {
		fields = append(fields, user.FieldTableName32)
	}
	if m.table_name33 != nil {
		fields = append(fields, user.FieldTableName33)
	}
	if m.table_name34 != nil {
		fields = append(fields, user.FieldTableName34)
	}
	if m.table_name35 != nil {
		fields = append(fields, user.FieldTableName35)
	}
	if m.table_name36 != nil {
		fields = append(fields, user.FieldTableName36)
	}
	if m.table_name37 != nil {
		fields = append(fields, user.FieldTableName37)
	}
	if m.table_name38 != nil {
		fields = append(fields, user.FieldTableName38)
	}
	if m.table_name39 != nil {
		fields = append(fields, user.FieldTableName39)
	}
	if m.table_name40 != nil {
		fields = append(fields, user.FieldTableName40)
	}
	if m.table_name41 != nil {
		fields = append(fields, user.FieldTableName41)
	}
	if m.table_name42 != nil {
		fields = append(fields, user.FieldTableName42)
	}
	if m.altered_table_name43 != nil {
		fields = append(fields, user.FieldAlteredTableName43)
	}
	if m.table_name44 != nil {
		fields = append(fields, user.FieldTableName44)
	}
	if m.table_name45 != nil {
		fields = append(fields, user.FieldTableName45)
	}
	if m.table_name46 != nil {
		fields = append(fields, user.FieldTableName46)
	}
	if m.table_name47 != nil {
		fields = append(fields, user.FieldTableName47)
	}
	if m.table_name48 != nil {
		fields = append(fields, user.FieldTableName48)
	}
	if m.table_name49 != nil {
		fields = append(fields, user.FieldTableName49)
	}
	if m.altered_table_name50 != nil {
		fields = append(fields, user.FieldAlteredTableName50)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldTableName0:
		return m.TableName0()
	case user.FieldTableName1:
		return m.TableName1()
	case user.FieldTableName2:
		return m.TableName2()
	case user.FieldTableName3:
		return m.TableName3()
	case user.FieldTableName4:
		return m.TableName4()
	case user.FieldTableName5:
		return m.TableName5()
	case user.FieldTableName6:
		return m.TableName6()
	case user.FieldTableName7:
		return m.TableName7()
	case user.FieldTableName8:
		return m.TableName8()
	case user.FieldTableName9:
		return m.TableName9()
	case user.FieldTableName10:
		return m.TableName10()
	case user.FieldTableName11:
		return m.TableName11()
	case user.FieldTableName12:
		return m.TableName12()
	case user.FieldTableName13:
		return m.TableName13()
	case user.FieldTableName14:
		return m.TableName14()
	case user.FieldTableName15:
		return m.TableName15()
	case user.FieldTableName16:
		return m.TableName16()
	case user.FieldTableName17:
		return m.TableName17()
	case user.FieldTableName18:
		return m.TableName18()
	case user.FieldTableName19:
		return m.TableName19()
	case user.FieldTableName20:
		return m.TableName20()
	case user.FieldTableName21:
		return m.TableName21()
	case user.FieldTableName22:
		return m.TableName22()
	case user.FieldTableName23:
		return m.TableName23()
	case user.FieldTableName24:
		return m.TableName24()
	case user.FieldTableName25:
		return m.TableName25()
	case user.FieldTableName26:
		return m.TableName26()
	case user.FieldTableName27:
		return m.TableName27()
	case user.FieldTableName28:
		return m.TableName28()
	case user.FieldTableName29:
		return m.TableName29()
	case user.FieldTableName30:
		return m.TableName30()
	case user.FieldTableName31:
		return m.TableName31()
	case user.FieldTableName32:
		return m.TableName32()
	case user.FieldTableName33:
		return m.TableName33()
	case user.FieldTableName34:
		return m.TableName34()
	case user.FieldTableName35:
		return m.TableName35()
	case user.FieldTableName36:
		return m.TableName36()
	case user.FieldTableName37:
		return m.TableName37()
	case user.FieldTableName38:
		return m.TableName38()
	case user.FieldTableName39:
		return m.TableName39()
	case user.FieldTableName40:
		return m.TableName40()
	case user.FieldTableName41:
		return m.TableName41()
	case user.FieldTableName42:
		return m.TableName42()
	case user.FieldAlteredTableName43:
		return m.AlteredTableName43()
	case user.FieldTableName44:
		return m.TableName44()
	case user.FieldTableName45:
		return m.TableName45()
	case user.FieldTableName46:
		return m.TableName46()
	case user.FieldTableName47:
		return m.TableName47()
	case user.FieldTableName48:
		return m.TableName48()
	case user.FieldTableName49:
		return m.TableName49()
	case user.FieldAlteredTableName50:
		return m.AlteredTableName50()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldTableName0:
		return m.OldTableName0(ctx)
	case user.FieldTableName1:
		return m.OldTableName1(ctx)
	case user.FieldTableName2:
		return m.OldTableName2(ctx)
	case user.FieldTableName3:
		return m.OldTableName3(ctx)
	case user.FieldTableName4:
		return m.OldTableName4(ctx)
	case user.FieldTableName5:
		return m.OldTableName5(ctx)
	case user.FieldTableName6:
		return m.OldTableName6(ctx)
	case user.FieldTableName7:
		return m.OldTableName7(ctx)
	case user.FieldTableName8:
		return m.OldTableName8(ctx)
	case user.FieldTableName9:
		return m.OldTableName9(ctx)
	case user.FieldTableName10:
		return m.OldTableName10(ctx)
	case user.FieldTableName11:
		return m.OldTableName11(ctx)
	case user.FieldTableName12:
		return m.OldTableName12(ctx)
	case user.FieldTableName13:
		return m.OldTableName13(ctx)
	case user.FieldTableName14:
		return m.OldTableName14(ctx)
	case user.FieldTableName15:
		return m.OldTableName15(ctx)
	case user.FieldTableName16:
		return m.OldTableName16(ctx)
	case user.FieldTableName17:
		return m.OldTableName17(ctx)
	case user.FieldTableName18:
		return m.OldTableName18(ctx)
	case user.FieldTableName19:
		return m.OldTableName19(ctx)
	case user.FieldTableName20:
		return m.OldTableName20(ctx)
	case user.FieldTableName21:
		return m.OldTableName21(ctx)
	case user.FieldTableName22:
		return m.OldTableName22(ctx)
	case user.FieldTableName23:
		return m.OldTableName23(ctx)
	case user.FieldTableName24:
		return m.OldTableName24(ctx)
	case user.FieldTableName25:
		return m.OldTableName25(ctx)
	case user.FieldTableName26:
		return m.OldTableName26(ctx)
	case user.FieldTableName27:
		return m.OldTableName27(ctx)
	case user.FieldTableName28:
		return m.OldTableName28(ctx)
	case user.FieldTableName29:
		return m.OldTableName29(ctx)
	case user.FieldTableName30:
		return m.OldTableName30(ctx)
	case user.FieldTableName31:
		return m.OldTableName31(ctx)
	case user.FieldTableName32:
		return m.OldTableName32(ctx)
	case user.FieldTableName33:
		return m.OldTableName33(ctx)
	case user.FieldTableName34:
		return m.OldTableName34(ctx)
	case user.FieldTableName35:
		return m.OldTableName35(ctx)
	case user.FieldTableName36:
		return m.OldTableName36(ctx)
	case user.FieldTableName37:
		return m.OldTableName37(ctx)
	case user.FieldTableName38:
		return m.OldTableName38(ctx)
	case user.FieldTableName39:
		return m.OldTableName39(ctx)
	case user.FieldTableName40:
		return m.OldTableName40(ctx)
	case user.FieldTableName41:
		return m.OldTableName41(ctx)
	case user.FieldTableName42:
		return m.OldTableName42(ctx)
	case user.FieldAlteredTableName43:
		return m.OldAlteredTableName43(ctx)
	case user.FieldTableName44:
		return m.OldTableName44(ctx)
	case user.FieldTableName45:
		return m.OldTableName45(ctx)
	case user.FieldTableName46:
		return m.OldTableName46(ctx)
	case user.FieldTableName47:
		return m.OldTableName47(ctx)
	case user.FieldTableName48:
		return m.OldTableName48(ctx)
	case user.FieldTableName49:
		return m.OldTableName49(ctx)
	case user.FieldAlteredTableName50:
		return m.OldAlteredTableName50(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldTableName0:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName0(v)
		return nil
	case user.FieldTableName1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName1(v)
		return nil
	case user.FieldTableName2:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName2(v)
		return nil
	case user.FieldTableName3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName3(v)
		return nil
	case user.FieldTableName4:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName4(v)
		return nil
	case user.FieldTableName5:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName5(v)
		return nil
	case user.FieldTableName6:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName6(v)
		return nil
	case user.FieldTableName7:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName7(v)
		return nil
	case user.FieldTableName8:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName8(v)
		return nil
	case user.FieldTableName9:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName9(v)
		return nil
	case user.FieldTableName10:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName10(v)
		return nil
	case user.FieldTableName11:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName11(v)
		return nil
	case user.FieldTableName12:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName12(v)
		return nil
	case user.FieldTableName13:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName13(v)
		return nil
	case user.FieldTableName14:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName14(v)
		return nil
	case user.FieldTableName15:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName15(v)
		return nil
	case user.FieldTableName16:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName16(v)
		return nil
	case user.FieldTableName17:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName17(v)
		return nil
	case user.FieldTableName18:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName18(v)
		return nil
	case user.FieldTableName19:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName19(v)
		return nil
	case user.FieldTableName20:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName20(v)
		return nil
	case user.FieldTableName21:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName21(v)
		return nil
	case user.FieldTableName22:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName22(v)
		return nil
	case user.FieldTableName23:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName23(v)
		return nil
	case user.FieldTableName24:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName24(v)
		return nil
	case user.FieldTableName25:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName25(v)
		return nil
	case user.FieldTableName26:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName26(v)
		return nil
	case user.FieldTableName27:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName27(v)
		return nil
	case user.FieldTableName28:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName28(v)
		return nil
	case user.FieldTableName29:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName29(v)
		return nil
	case user.FieldTableName30:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName30(v)
		return nil
	case user.FieldTableName31:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName31(v)
		return nil
	case user.FieldTableName32:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName32(v)
		return nil
	case user.FieldTableName33:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName33(v)
		return nil
	case user.FieldTableName34:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName34(v)
		return nil
	case user.FieldTableName35:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName35(v)
		return nil
	case user.FieldTableName36:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName36(v)
		return nil
	case user.FieldTableName37:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName37(v)
		return nil
	case user.FieldTableName38:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName38(v)
		return nil
	case user.FieldTableName39:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName39(v)
		return nil
	case user.FieldTableName40:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName40(v)
		return nil
	case user.FieldTableName41:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName41(v)
		return nil
	case user.FieldTableName42:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName42(v)
		return nil
	case user.FieldAlteredTableName43:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlteredTableName43(v)
		return nil
	case user.FieldTableName44:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName44(v)
		return nil
	case user.FieldTableName45:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName45(v)
		return nil
	case user.FieldTableName46:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName46(v)
		return nil
	case user.FieldTableName47:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName47(v)
		return nil
	case user.FieldTableName48:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName48(v)
		return nil
	case user.FieldTableName49:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName49(v)
		return nil
	case user.FieldAlteredTableName50:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlteredTableName50(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addtable_name2 != nil {
		fields = append(fields, user.FieldTableName2)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldTableName2:
		return m.AddedTableName2()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldTableName2:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTableName2(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldTableName0:
		m.ResetTableName0()
		return nil
	case user.FieldTableName1:
		m.ResetTableName1()
		return nil
	case user.FieldTableName2:
		m.ResetTableName2()
		return nil
	case user.FieldTableName3:
		m.ResetTableName3()
		return nil
	case user.FieldTableName4:
		m.ResetTableName4()
		return nil
	case user.FieldTableName5:
		m.ResetTableName5()
		return nil
	case user.FieldTableName6:
		m.ResetTableName6()
		return nil
	case user.FieldTableName7:
		m.ResetTableName7()
		return nil
	case user.FieldTableName8:
		m.ResetTableName8()
		return nil
	case user.FieldTableName9:
		m.ResetTableName9()
		return nil
	case user.FieldTableName10:
		m.ResetTableName10()
		return nil
	case user.FieldTableName11:
		m.ResetTableName11()
		return nil
	case user.FieldTableName12:
		m.ResetTableName12()
		return nil
	case user.FieldTableName13:
		m.ResetTableName13()
		return nil
	case user.FieldTableName14:
		m.ResetTableName14()
		return nil
	case user.FieldTableName15:
		m.ResetTableName15()
		return nil
	case user.FieldTableName16:
		m.ResetTableName16()
		return nil
	case user.FieldTableName17:
		m.ResetTableName17()
		return nil
	case user.FieldTableName18:
		m.ResetTableName18()
		return nil
	case user.FieldTableName19:
		m.ResetTableName19()
		return nil
	case user.FieldTableName20:
		m.ResetTableName20()
		return nil
	case user.FieldTableName21:
		m.ResetTableName21()
		return nil
	case user.FieldTableName22:
		m.ResetTableName22()
		return nil
	case user.FieldTableName23:
		m.ResetTableName23()
		return nil
	case user.FieldTableName24:
		m.ResetTableName24()
		return nil
	case user.FieldTableName25:
		m.ResetTableName25()
		return nil
	case user.FieldTableName26:
		m.ResetTableName26()
		return nil
	case user.FieldTableName27:
		m.ResetTableName27()
		return nil
	case user.FieldTableName28:
		m.ResetTableName28()
		return nil
	case user.FieldTableName29:
		m.ResetTableName29()
		return nil
	case user.FieldTableName30:
		m.ResetTableName30()
		return nil
	case user.FieldTableName31:
		m.ResetTableName31()
		return nil
	case user.FieldTableName32:
		m.ResetTableName32()
		return nil
	case user.FieldTableName33:
		m.ResetTableName33()
		return nil
	case user.FieldTableName34:
		m.ResetTableName34()
		return nil
	case user.FieldTableName35:
		m.ResetTableName35()
		return nil
	case user.FieldTableName36:
		m.ResetTableName36()
		return nil
	case user.FieldTableName37:
		m.ResetTableName37()
		return nil
	case user.FieldTableName38:
		m.ResetTableName38()
		return nil
	case user.FieldTableName39:
		m.ResetTableName39()
		return nil
	case user.FieldTableName40:
		m.ResetTableName40()
		return nil
	case user.FieldTableName41:
		m.ResetTableName41()
		return nil
	case user.FieldTableName42:
		m.ResetTableName42()
		return nil
	case user.FieldAlteredTableName43:
		m.ResetAlteredTableName43()
		return nil
	case user.FieldTableName44:
		m.ResetTableName44()
		return nil
	case user.FieldTableName45:
		m.ResetTableName45()
		return nil
	case user.FieldTableName46:
		m.ResetTableName46()
		return nil
	case user.FieldTableName47:
		m.ResetTableName47()
		return nil
	case user.FieldTableName48:
		m.ResetTableName48()
		return nil
	case user.FieldTableName49:
		m.ResetTableName49()
		return nil
	case user.FieldAlteredTableName50:
		m.ResetAlteredTableName50()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

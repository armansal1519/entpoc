// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entpoc/ent/user"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetTableName0 sets the "table_name0" field.
func (uc *UserCreate) SetTableName0(s string) *UserCreate {
	uc.mutation.SetTableName0(s)
	return uc
}

// SetTableName1 sets the "table_name1" field.
func (uc *UserCreate) SetTableName1(s string) *UserCreate {
	uc.mutation.SetTableName1(s)
	return uc
}

// SetTableName2 sets the "table_name2" field.
func (uc *UserCreate) SetTableName2(i int) *UserCreate {
	uc.mutation.SetTableName2(i)
	return uc
}

// SetTableName3 sets the "table_name3" field.
func (uc *UserCreate) SetTableName3(s string) *UserCreate {
	uc.mutation.SetTableName3(s)
	return uc
}

// SetTableName4 sets the "table_name4" field.
func (uc *UserCreate) SetTableName4(s string) *UserCreate {
	uc.mutation.SetTableName4(s)
	return uc
}

// SetTableName5 sets the "table_name5" field.
func (uc *UserCreate) SetTableName5(s string) *UserCreate {
	uc.mutation.SetTableName5(s)
	return uc
}

// SetTableName6 sets the "table_name6" field.
func (uc *UserCreate) SetTableName6(s string) *UserCreate {
	uc.mutation.SetTableName6(s)
	return uc
}

// SetTableName7 sets the "table_name7" field.
func (uc *UserCreate) SetTableName7(s string) *UserCreate {
	uc.mutation.SetTableName7(s)
	return uc
}

// SetTableName8 sets the "table_name8" field.
func (uc *UserCreate) SetTableName8(s string) *UserCreate {
	uc.mutation.SetTableName8(s)
	return uc
}

// SetTableName9 sets the "table_name9" field.
func (uc *UserCreate) SetTableName9(s string) *UserCreate {
	uc.mutation.SetTableName9(s)
	return uc
}

// SetTableName10 sets the "table_name10" field.
func (uc *UserCreate) SetTableName10(s string) *UserCreate {
	uc.mutation.SetTableName10(s)
	return uc
}

// SetTableName11 sets the "table_name11" field.
func (uc *UserCreate) SetTableName11(s string) *UserCreate {
	uc.mutation.SetTableName11(s)
	return uc
}

// SetTableName12 sets the "table_name12" field.
func (uc *UserCreate) SetTableName12(s string) *UserCreate {
	uc.mutation.SetTableName12(s)
	return uc
}

// SetTableName13 sets the "table_name13" field.
func (uc *UserCreate) SetTableName13(s string) *UserCreate {
	uc.mutation.SetTableName13(s)
	return uc
}

// SetTableName14 sets the "table_name14" field.
func (uc *UserCreate) SetTableName14(s string) *UserCreate {
	uc.mutation.SetTableName14(s)
	return uc
}

// SetTableName15 sets the "table_name15" field.
func (uc *UserCreate) SetTableName15(s string) *UserCreate {
	uc.mutation.SetTableName15(s)
	return uc
}

// SetTableName16 sets the "table_name16" field.
func (uc *UserCreate) SetTableName16(s string) *UserCreate {
	uc.mutation.SetTableName16(s)
	return uc
}

// SetTableName17 sets the "table_name17" field.
func (uc *UserCreate) SetTableName17(s string) *UserCreate {
	uc.mutation.SetTableName17(s)
	return uc
}

// SetTableName18 sets the "table_name18" field.
func (uc *UserCreate) SetTableName18(s string) *UserCreate {
	uc.mutation.SetTableName18(s)
	return uc
}

// SetTableName19 sets the "table_name19" field.
func (uc *UserCreate) SetTableName19(s string) *UserCreate {
	uc.mutation.SetTableName19(s)
	return uc
}

// SetTableName20 sets the "table_name20" field.
func (uc *UserCreate) SetTableName20(s string) *UserCreate {
	uc.mutation.SetTableName20(s)
	return uc
}

// SetTableName21 sets the "table_name21" field.
func (uc *UserCreate) SetTableName21(s string) *UserCreate {
	uc.mutation.SetTableName21(s)
	return uc
}

// SetTableName22 sets the "table_name22" field.
func (uc *UserCreate) SetTableName22(s string) *UserCreate {
	uc.mutation.SetTableName22(s)
	return uc
}

// SetTableName23 sets the "table_name23" field.
func (uc *UserCreate) SetTableName23(s string) *UserCreate {
	uc.mutation.SetTableName23(s)
	return uc
}

// SetTableName24 sets the "table_name24" field.
func (uc *UserCreate) SetTableName24(s string) *UserCreate {
	uc.mutation.SetTableName24(s)
	return uc
}

// SetTableName25 sets the "table_name25" field.
func (uc *UserCreate) SetTableName25(s string) *UserCreate {
	uc.mutation.SetTableName25(s)
	return uc
}

// SetTableName26 sets the "table_name26" field.
func (uc *UserCreate) SetTableName26(s string) *UserCreate {
	uc.mutation.SetTableName26(s)
	return uc
}

// SetTableName27 sets the "table_name27" field.
func (uc *UserCreate) SetTableName27(s string) *UserCreate {
	uc.mutation.SetTableName27(s)
	return uc
}

// SetTableName28 sets the "table_name28" field.
func (uc *UserCreate) SetTableName28(s string) *UserCreate {
	uc.mutation.SetTableName28(s)
	return uc
}

// SetTableName29 sets the "table_name29" field.
func (uc *UserCreate) SetTableName29(s string) *UserCreate {
	uc.mutation.SetTableName29(s)
	return uc
}

// SetTableName30 sets the "table_name30" field.
func (uc *UserCreate) SetTableName30(s string) *UserCreate {
	uc.mutation.SetTableName30(s)
	return uc
}

// SetTableName31 sets the "table_name31" field.
func (uc *UserCreate) SetTableName31(s string) *UserCreate {
	uc.mutation.SetTableName31(s)
	return uc
}

// SetTableName32 sets the "table_name32" field.
func (uc *UserCreate) SetTableName32(s string) *UserCreate {
	uc.mutation.SetTableName32(s)
	return uc
}

// SetTableName33 sets the "table_name33" field.
func (uc *UserCreate) SetTableName33(s string) *UserCreate {
	uc.mutation.SetTableName33(s)
	return uc
}

// SetTableName34 sets the "table_name34" field.
func (uc *UserCreate) SetTableName34(s string) *UserCreate {
	uc.mutation.SetTableName34(s)
	return uc
}

// SetTableName35 sets the "table_name35" field.
func (uc *UserCreate) SetTableName35(s string) *UserCreate {
	uc.mutation.SetTableName35(s)
	return uc
}

// SetTableName36 sets the "table_name36" field.
func (uc *UserCreate) SetTableName36(s string) *UserCreate {
	uc.mutation.SetTableName36(s)
	return uc
}

// SetTableName37 sets the "table_name37" field.
func (uc *UserCreate) SetTableName37(s string) *UserCreate {
	uc.mutation.SetTableName37(s)
	return uc
}

// SetTableName38 sets the "table_name38" field.
func (uc *UserCreate) SetTableName38(s string) *UserCreate {
	uc.mutation.SetTableName38(s)
	return uc
}

// SetTableName39 sets the "table_name39" field.
func (uc *UserCreate) SetTableName39(s string) *UserCreate {
	uc.mutation.SetTableName39(s)
	return uc
}

// SetTableName40 sets the "table_name40" field.
func (uc *UserCreate) SetTableName40(s string) *UserCreate {
	uc.mutation.SetTableName40(s)
	return uc
}

// SetTableName41 sets the "table_name41" field.
func (uc *UserCreate) SetTableName41(s string) *UserCreate {
	uc.mutation.SetTableName41(s)
	return uc
}

// SetTableName42 sets the "table_name42" field.
func (uc *UserCreate) SetTableName42(s string) *UserCreate {
	uc.mutation.SetTableName42(s)
	return uc
}

// SetAlteredTableName43 sets the "altered_table_name43" field.
func (uc *UserCreate) SetAlteredTableName43(s string) *UserCreate {
	uc.mutation.SetAlteredTableName43(s)
	return uc
}

// SetTableName44 sets the "table_name44" field.
func (uc *UserCreate) SetTableName44(s string) *UserCreate {
	uc.mutation.SetTableName44(s)
	return uc
}

// SetTableName45 sets the "table_name45" field.
func (uc *UserCreate) SetTableName45(s string) *UserCreate {
	uc.mutation.SetTableName45(s)
	return uc
}

// SetTableName46 sets the "table_name46" field.
func (uc *UserCreate) SetTableName46(s string) *UserCreate {
	uc.mutation.SetTableName46(s)
	return uc
}

// SetTableName47 sets the "table_name47" field.
func (uc *UserCreate) SetTableName47(s string) *UserCreate {
	uc.mutation.SetTableName47(s)
	return uc
}

// SetTableName48 sets the "table_name48" field.
func (uc *UserCreate) SetTableName48(s string) *UserCreate {
	uc.mutation.SetTableName48(s)
	return uc
}

// SetTableName49 sets the "table_name49" field.
func (uc *UserCreate) SetTableName49(s string) *UserCreate {
	uc.mutation.SetTableName49(s)
	return uc
}

// SetAlteredTableName50 sets the "altered_table_name50" field.
func (uc *UserCreate) SetAlteredTableName50(s string) *UserCreate {
	uc.mutation.SetAlteredTableName50(s)
	return uc
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "User.name"`)}
	}
	if _, ok := uc.mutation.TableName0(); !ok {
		return &ValidationError{Name: "table_name0", err: errors.New(`ent: missing required field "User.table_name0"`)}
	}
	if _, ok := uc.mutation.TableName1(); !ok {
		return &ValidationError{Name: "table_name1", err: errors.New(`ent: missing required field "User.table_name1"`)}
	}
	if _, ok := uc.mutation.TableName2(); !ok {
		return &ValidationError{Name: "table_name2", err: errors.New(`ent: missing required field "User.table_name2"`)}
	}
	if _, ok := uc.mutation.TableName3(); !ok {
		return &ValidationError{Name: "table_name3", err: errors.New(`ent: missing required field "User.table_name3"`)}
	}
	if _, ok := uc.mutation.TableName4(); !ok {
		return &ValidationError{Name: "table_name4", err: errors.New(`ent: missing required field "User.table_name4"`)}
	}
	if _, ok := uc.mutation.TableName5(); !ok {
		return &ValidationError{Name: "table_name5", err: errors.New(`ent: missing required field "User.table_name5"`)}
	}
	if _, ok := uc.mutation.TableName6(); !ok {
		return &ValidationError{Name: "table_name6", err: errors.New(`ent: missing required field "User.table_name6"`)}
	}
	if _, ok := uc.mutation.TableName7(); !ok {
		return &ValidationError{Name: "table_name7", err: errors.New(`ent: missing required field "User.table_name7"`)}
	}
	if _, ok := uc.mutation.TableName8(); !ok {
		return &ValidationError{Name: "table_name8", err: errors.New(`ent: missing required field "User.table_name8"`)}
	}
	if _, ok := uc.mutation.TableName9(); !ok {
		return &ValidationError{Name: "table_name9", err: errors.New(`ent: missing required field "User.table_name9"`)}
	}
	if _, ok := uc.mutation.TableName10(); !ok {
		return &ValidationError{Name: "table_name10", err: errors.New(`ent: missing required field "User.table_name10"`)}
	}
	if _, ok := uc.mutation.TableName11(); !ok {
		return &ValidationError{Name: "table_name11", err: errors.New(`ent: missing required field "User.table_name11"`)}
	}
	if _, ok := uc.mutation.TableName12(); !ok {
		return &ValidationError{Name: "table_name12", err: errors.New(`ent: missing required field "User.table_name12"`)}
	}
	if _, ok := uc.mutation.TableName13(); !ok {
		return &ValidationError{Name: "table_name13", err: errors.New(`ent: missing required field "User.table_name13"`)}
	}
	if _, ok := uc.mutation.TableName14(); !ok {
		return &ValidationError{Name: "table_name14", err: errors.New(`ent: missing required field "User.table_name14"`)}
	}
	if _, ok := uc.mutation.TableName15(); !ok {
		return &ValidationError{Name: "table_name15", err: errors.New(`ent: missing required field "User.table_name15"`)}
	}
	if _, ok := uc.mutation.TableName16(); !ok {
		return &ValidationError{Name: "table_name16", err: errors.New(`ent: missing required field "User.table_name16"`)}
	}
	if _, ok := uc.mutation.TableName17(); !ok {
		return &ValidationError{Name: "table_name17", err: errors.New(`ent: missing required field "User.table_name17"`)}
	}
	if _, ok := uc.mutation.TableName18(); !ok {
		return &ValidationError{Name: "table_name18", err: errors.New(`ent: missing required field "User.table_name18"`)}
	}
	if _, ok := uc.mutation.TableName19(); !ok {
		return &ValidationError{Name: "table_name19", err: errors.New(`ent: missing required field "User.table_name19"`)}
	}
	if _, ok := uc.mutation.TableName20(); !ok {
		return &ValidationError{Name: "table_name20", err: errors.New(`ent: missing required field "User.table_name20"`)}
	}
	if _, ok := uc.mutation.TableName21(); !ok {
		return &ValidationError{Name: "table_name21", err: errors.New(`ent: missing required field "User.table_name21"`)}
	}
	if _, ok := uc.mutation.TableName22(); !ok {
		return &ValidationError{Name: "table_name22", err: errors.New(`ent: missing required field "User.table_name22"`)}
	}
	if _, ok := uc.mutation.TableName23(); !ok {
		return &ValidationError{Name: "table_name23", err: errors.New(`ent: missing required field "User.table_name23"`)}
	}
	if _, ok := uc.mutation.TableName24(); !ok {
		return &ValidationError{Name: "table_name24", err: errors.New(`ent: missing required field "User.table_name24"`)}
	}
	if _, ok := uc.mutation.TableName25(); !ok {
		return &ValidationError{Name: "table_name25", err: errors.New(`ent: missing required field "User.table_name25"`)}
	}
	if _, ok := uc.mutation.TableName26(); !ok {
		return &ValidationError{Name: "table_name26", err: errors.New(`ent: missing required field "User.table_name26"`)}
	}
	if _, ok := uc.mutation.TableName27(); !ok {
		return &ValidationError{Name: "table_name27", err: errors.New(`ent: missing required field "User.table_name27"`)}
	}
	if _, ok := uc.mutation.TableName28(); !ok {
		return &ValidationError{Name: "table_name28", err: errors.New(`ent: missing required field "User.table_name28"`)}
	}
	if _, ok := uc.mutation.TableName29(); !ok {
		return &ValidationError{Name: "table_name29", err: errors.New(`ent: missing required field "User.table_name29"`)}
	}
	if _, ok := uc.mutation.TableName30(); !ok {
		return &ValidationError{Name: "table_name30", err: errors.New(`ent: missing required field "User.table_name30"`)}
	}
	if _, ok := uc.mutation.TableName31(); !ok {
		return &ValidationError{Name: "table_name31", err: errors.New(`ent: missing required field "User.table_name31"`)}
	}
	if _, ok := uc.mutation.TableName32(); !ok {
		return &ValidationError{Name: "table_name32", err: errors.New(`ent: missing required field "User.table_name32"`)}
	}
	if _, ok := uc.mutation.TableName33(); !ok {
		return &ValidationError{Name: "table_name33", err: errors.New(`ent: missing required field "User.table_name33"`)}
	}
	if _, ok := uc.mutation.TableName34(); !ok {
		return &ValidationError{Name: "table_name34", err: errors.New(`ent: missing required field "User.table_name34"`)}
	}
	if _, ok := uc.mutation.TableName35(); !ok {
		return &ValidationError{Name: "table_name35", err: errors.New(`ent: missing required field "User.table_name35"`)}
	}
	if _, ok := uc.mutation.TableName36(); !ok {
		return &ValidationError{Name: "table_name36", err: errors.New(`ent: missing required field "User.table_name36"`)}
	}
	if _, ok := uc.mutation.TableName37(); !ok {
		return &ValidationError{Name: "table_name37", err: errors.New(`ent: missing required field "User.table_name37"`)}
	}
	if _, ok := uc.mutation.TableName38(); !ok {
		return &ValidationError{Name: "table_name38", err: errors.New(`ent: missing required field "User.table_name38"`)}
	}
	if _, ok := uc.mutation.TableName39(); !ok {
		return &ValidationError{Name: "table_name39", err: errors.New(`ent: missing required field "User.table_name39"`)}
	}
	if _, ok := uc.mutation.TableName40(); !ok {
		return &ValidationError{Name: "table_name40", err: errors.New(`ent: missing required field "User.table_name40"`)}
	}
	if _, ok := uc.mutation.TableName41(); !ok {
		return &ValidationError{Name: "table_name41", err: errors.New(`ent: missing required field "User.table_name41"`)}
	}
	if _, ok := uc.mutation.TableName42(); !ok {
		return &ValidationError{Name: "table_name42", err: errors.New(`ent: missing required field "User.table_name42"`)}
	}
	if _, ok := uc.mutation.AlteredTableName43(); !ok {
		return &ValidationError{Name: "altered_table_name43", err: errors.New(`ent: missing required field "User.altered_table_name43"`)}
	}
	if _, ok := uc.mutation.TableName44(); !ok {
		return &ValidationError{Name: "table_name44", err: errors.New(`ent: missing required field "User.table_name44"`)}
	}
	if _, ok := uc.mutation.TableName45(); !ok {
		return &ValidationError{Name: "table_name45", err: errors.New(`ent: missing required field "User.table_name45"`)}
	}
	if _, ok := uc.mutation.TableName46(); !ok {
		return &ValidationError{Name: "table_name46", err: errors.New(`ent: missing required field "User.table_name46"`)}
	}
	if _, ok := uc.mutation.TableName47(); !ok {
		return &ValidationError{Name: "table_name47", err: errors.New(`ent: missing required field "User.table_name47"`)}
	}
	if _, ok := uc.mutation.TableName48(); !ok {
		return &ValidationError{Name: "table_name48", err: errors.New(`ent: missing required field "User.table_name48"`)}
	}
	if _, ok := uc.mutation.TableName49(); !ok {
		return &ValidationError{Name: "table_name49", err: errors.New(`ent: missing required field "User.table_name49"`)}
	}
	if _, ok := uc.mutation.AlteredTableName50(); !ok {
		return &ValidationError{Name: "altered_table_name50", err: errors.New(`ent: missing required field "User.altered_table_name50"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.TableName0(); ok {
		_spec.SetField(user.FieldTableName0, field.TypeString, value)
		_node.TableName0 = value
	}
	if value, ok := uc.mutation.TableName1(); ok {
		_spec.SetField(user.FieldTableName1, field.TypeString, value)
		_node.TableName1 = value
	}
	if value, ok := uc.mutation.TableName2(); ok {
		_spec.SetField(user.FieldTableName2, field.TypeInt, value)
		_node.TableName2 = value
	}
	if value, ok := uc.mutation.TableName3(); ok {
		_spec.SetField(user.FieldTableName3, field.TypeString, value)
		_node.TableName3 = value
	}
	if value, ok := uc.mutation.TableName4(); ok {
		_spec.SetField(user.FieldTableName4, field.TypeString, value)
		_node.TableName4 = value
	}
	if value, ok := uc.mutation.TableName5(); ok {
		_spec.SetField(user.FieldTableName5, field.TypeString, value)
		_node.TableName5 = value
	}
	if value, ok := uc.mutation.TableName6(); ok {
		_spec.SetField(user.FieldTableName6, field.TypeString, value)
		_node.TableName6 = value
	}
	if value, ok := uc.mutation.TableName7(); ok {
		_spec.SetField(user.FieldTableName7, field.TypeString, value)
		_node.TableName7 = value
	}
	if value, ok := uc.mutation.TableName8(); ok {
		_spec.SetField(user.FieldTableName8, field.TypeString, value)
		_node.TableName8 = value
	}
	if value, ok := uc.mutation.TableName9(); ok {
		_spec.SetField(user.FieldTableName9, field.TypeString, value)
		_node.TableName9 = value
	}
	if value, ok := uc.mutation.TableName10(); ok {
		_spec.SetField(user.FieldTableName10, field.TypeString, value)
		_node.TableName10 = value
	}
	if value, ok := uc.mutation.TableName11(); ok {
		_spec.SetField(user.FieldTableName11, field.TypeString, value)
		_node.TableName11 = value
	}
	if value, ok := uc.mutation.TableName12(); ok {
		_spec.SetField(user.FieldTableName12, field.TypeString, value)
		_node.TableName12 = value
	}
	if value, ok := uc.mutation.TableName13(); ok {
		_spec.SetField(user.FieldTableName13, field.TypeString, value)
		_node.TableName13 = value
	}
	if value, ok := uc.mutation.TableName14(); ok {
		_spec.SetField(user.FieldTableName14, field.TypeString, value)
		_node.TableName14 = value
	}
	if value, ok := uc.mutation.TableName15(); ok {
		_spec.SetField(user.FieldTableName15, field.TypeString, value)
		_node.TableName15 = value
	}
	if value, ok := uc.mutation.TableName16(); ok {
		_spec.SetField(user.FieldTableName16, field.TypeString, value)
		_node.TableName16 = value
	}
	if value, ok := uc.mutation.TableName17(); ok {
		_spec.SetField(user.FieldTableName17, field.TypeString, value)
		_node.TableName17 = value
	}
	if value, ok := uc.mutation.TableName18(); ok {
		_spec.SetField(user.FieldTableName18, field.TypeString, value)
		_node.TableName18 = value
	}
	if value, ok := uc.mutation.TableName19(); ok {
		_spec.SetField(user.FieldTableName19, field.TypeString, value)
		_node.TableName19 = value
	}
	if value, ok := uc.mutation.TableName20(); ok {
		_spec.SetField(user.FieldTableName20, field.TypeString, value)
		_node.TableName20 = value
	}
	if value, ok := uc.mutation.TableName21(); ok {
		_spec.SetField(user.FieldTableName21, field.TypeString, value)
		_node.TableName21 = value
	}
	if value, ok := uc.mutation.TableName22(); ok {
		_spec.SetField(user.FieldTableName22, field.TypeString, value)
		_node.TableName22 = value
	}
	if value, ok := uc.mutation.TableName23(); ok {
		_spec.SetField(user.FieldTableName23, field.TypeString, value)
		_node.TableName23 = value
	}
	if value, ok := uc.mutation.TableName24(); ok {
		_spec.SetField(user.FieldTableName24, field.TypeString, value)
		_node.TableName24 = value
	}
	if value, ok := uc.mutation.TableName25(); ok {
		_spec.SetField(user.FieldTableName25, field.TypeString, value)
		_node.TableName25 = value
	}
	if value, ok := uc.mutation.TableName26(); ok {
		_spec.SetField(user.FieldTableName26, field.TypeString, value)
		_node.TableName26 = value
	}
	if value, ok := uc.mutation.TableName27(); ok {
		_spec.SetField(user.FieldTableName27, field.TypeString, value)
		_node.TableName27 = value
	}
	if value, ok := uc.mutation.TableName28(); ok {
		_spec.SetField(user.FieldTableName28, field.TypeString, value)
		_node.TableName28 = value
	}
	if value, ok := uc.mutation.TableName29(); ok {
		_spec.SetField(user.FieldTableName29, field.TypeString, value)
		_node.TableName29 = value
	}
	if value, ok := uc.mutation.TableName30(); ok {
		_spec.SetField(user.FieldTableName30, field.TypeString, value)
		_node.TableName30 = value
	}
	if value, ok := uc.mutation.TableName31(); ok {
		_spec.SetField(user.FieldTableName31, field.TypeString, value)
		_node.TableName31 = value
	}
	if value, ok := uc.mutation.TableName32(); ok {
		_spec.SetField(user.FieldTableName32, field.TypeString, value)
		_node.TableName32 = value
	}
	if value, ok := uc.mutation.TableName33(); ok {
		_spec.SetField(user.FieldTableName33, field.TypeString, value)
		_node.TableName33 = value
	}
	if value, ok := uc.mutation.TableName34(); ok {
		_spec.SetField(user.FieldTableName34, field.TypeString, value)
		_node.TableName34 = value
	}
	if value, ok := uc.mutation.TableName35(); ok {
		_spec.SetField(user.FieldTableName35, field.TypeString, value)
		_node.TableName35 = value
	}
	if value, ok := uc.mutation.TableName36(); ok {
		_spec.SetField(user.FieldTableName36, field.TypeString, value)
		_node.TableName36 = value
	}
	if value, ok := uc.mutation.TableName37(); ok {
		_spec.SetField(user.FieldTableName37, field.TypeString, value)
		_node.TableName37 = value
	}
	if value, ok := uc.mutation.TableName38(); ok {
		_spec.SetField(user.FieldTableName38, field.TypeString, value)
		_node.TableName38 = value
	}
	if value, ok := uc.mutation.TableName39(); ok {
		_spec.SetField(user.FieldTableName39, field.TypeString, value)
		_node.TableName39 = value
	}
	if value, ok := uc.mutation.TableName40(); ok {
		_spec.SetField(user.FieldTableName40, field.TypeString, value)
		_node.TableName40 = value
	}
	if value, ok := uc.mutation.TableName41(); ok {
		_spec.SetField(user.FieldTableName41, field.TypeString, value)
		_node.TableName41 = value
	}
	if value, ok := uc.mutation.TableName42(); ok {
		_spec.SetField(user.FieldTableName42, field.TypeString, value)
		_node.TableName42 = value
	}
	if value, ok := uc.mutation.AlteredTableName43(); ok {
		_spec.SetField(user.FieldAlteredTableName43, field.TypeString, value)
		_node.AlteredTableName43 = value
	}
	if value, ok := uc.mutation.TableName44(); ok {
		_spec.SetField(user.FieldTableName44, field.TypeString, value)
		_node.TableName44 = value
	}
	if value, ok := uc.mutation.TableName45(); ok {
		_spec.SetField(user.FieldTableName45, field.TypeString, value)
		_node.TableName45 = value
	}
	if value, ok := uc.mutation.TableName46(); ok {
		_spec.SetField(user.FieldTableName46, field.TypeString, value)
		_node.TableName46 = value
	}
	if value, ok := uc.mutation.TableName47(); ok {
		_spec.SetField(user.FieldTableName47, field.TypeString, value)
		_node.TableName47 = value
	}
	if value, ok := uc.mutation.TableName48(); ok {
		_spec.SetField(user.FieldTableName48, field.TypeString, value)
		_node.TableName48 = value
	}
	if value, ok := uc.mutation.TableName49(); ok {
		_spec.SetField(user.FieldTableName49, field.TypeString, value)
		_node.TableName49 = value
	}
	if value, ok := uc.mutation.AlteredTableName50(); ok {
		_spec.SetField(user.FieldAlteredTableName50, field.TypeString, value)
		_node.AlteredTableName50 = value
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
